{"title":"Java 数字签名算法","date":"2021-10-18T12:26:56.000Z","date_formatted":{"ll":"2021年10月18日","L":"2021/10/18","MM-DD":"10-18"},"link":"java-digital-signature-algorithm","tags":["java"],"updated":"2021-10-18T04:30:09.577Z","content":"<p>数字签名算法可以看成是带秘钥的消息摘要算法，用于验证数据完整性、认证数据来源，并起到抗否认的作用。遵循私钥加签，公钥验签的规则，数字签名算法是非对称加密算法和消息摘要算法的结合体。数字签名算法主要包括RSA和DSA。这节记录下这两种算法在JDK8下的实现。</p>\n<p>数字签名加签验签流程分为以下几步：</p>\n<ol>\n<li>A在本地构建秘钥对，并将公钥发布给B；</li>\n<li>A使用私钥对数据进行签名；</li>\n<li>A发送签名和数据给B；</li>\n<li>B使用公钥对签名和数据进行验签。</li>\n</ol>\n<h2 id=\"rsa\">RSA<a title=\"#rsa\" href=\"#rsa\"></a></h2>\n<p>RSA数字签名算法主要分为MD系列和SHA系列两大类。MD系列主要包括MD2withRSA和MD5withRSA共2种数字签名算法；SHA系列主要包括SHA1withRSA、SHA224withRSA、SHA256withRSA、SHA384withRSA和SHA512withRSA共5种数字签名算法。</p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RsaSignatureDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"string\">&quot;mrbird&#x27;s blog&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 非对称加密算法</span></span><br><span class=\"line\">        String algorithm = <span class=\"string\">&quot;RSA&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 签名算法，RSA+SHA</span></span><br><span class=\"line\">        String signAlgorithm = <span class=\"string\">&quot;SHA256withRSA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 公私钥生成 --------</span></span><br><span class=\"line\">        <span class=\"comment\">// 实例化秘钥对生成器</span></span><br><span class=\"line\">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，秘钥长度512~16384位，64倍数</span></span><br><span class=\"line\">        keyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成秘钥对</span></span><br><span class=\"line\">        KeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">        <span class=\"comment\">// 公钥</span></span><br><span class=\"line\">        PublicKey publicKey = keyPair.getPublic();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RSA公钥: &quot;</span> + Base64.getEncoder().encodeToString(publicKey.getEncoded()));</span><br><span class=\"line\">        <span class=\"comment\">// 私钥</span></span><br><span class=\"line\">        PrivateKey privateKey = keyPair.getPrivate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RSA私钥: &quot;</span> + Base64.getEncoder().encodeToString(privateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 私钥加签 ---------</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取签名对象</span></span><br><span class=\"line\">        Signature signature = Signature.getInstance(signAlgorithm);</span><br><span class=\"line\">        signature.initSign(privateKey);</span><br><span class=\"line\">        signature.update(value.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sign = signature.sign();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;签名值: &quot;</span> + Base64.getEncoder().encodeToString(sign));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 公钥验签 ---------</span></span><br><span class=\"line\">        signature.initVerify(publicKey);</span><br><span class=\"line\">        signature.update(value.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;验签结果: &quot;</span> + signature.verify(sign));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>秘钥对生成过程和上篇RSA介绍的无异，主要关注加签和验签操作即可，程序输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSA公钥: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKTTlw+zyhGzmTmhT5w9vEP1ejOcVfM2rHbz8jUae7InAh42R9ZaYUk1c3q0uqmTv8xKOnszU/vrdV52zoFM+OMCAwEAAQ==</span><br><span class=\"line\">RSA私钥: MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEApNOXD7PKEbOZOaFPnD28Q/V6M5xV8zasdvPyNRp7sicCHjZH1lphSTVzerS6qZO/zEo6ezNT++t1XnbOgUz44wIDAQABAkBsZQXz+p2J1J2Qq8fqDSNxYc8Sf956SttSgw0m5Rqxxiw10cgHt67uocu3qK6UeMuJuaOiN3YT48kvFp6Joc75AiEA4L7R1zDWcOdWf2BE/k3yxJ4Uv0vbIZ9vWLuJGBR3xK0CIQC7v5f2fcedBWbJ/kR7CvbFE91ivM55dvWZMe/JrjXVzwIgFUn+FqRJq+g+CVLVNkGr/XP8AyLsXwL7SSx6kA1gSwECIHysAn4VEftr/dC+Pr0yD6HYyhbp53XzD6214lQbkfYzAiB1b2wNi0Y3N+D/OIrGUHlwgA0vkX82NP3V8qMDmRbCTQ==</span><br><span class=\"line\">签名值: HVN5WkhND0hy/xY43h8r3+AVt6oxMSv1Ug/Y+bv1tGxw4ePQtIgzFwK0lQQbhIlwts2d2STwQBews4dXCfEMmA==</span><br><span class=\"line\">验签结果: true</span><br></pre></td></tr></table></figure>\n<p>需要注意的是不同签名算法需要的秘钥长度最小值不同，大伙可以自己试试。</p>\n<h2 id=\"dsa\">DSA<a title=\"#dsa\" href=\"#dsa\"></a></h2>\n<p>DSA算法与RSA算法都是数字证书中不可或缺的两种算法。两者不同的是，DSA算法仅包含数字签名算法，使用DSA算法的数字证书无法进行加密通信，而RSA算法既包含加密/解密算法，同时兼有数字签名算法。</p>\n<p>JDK8支持SHA1withDSA、SHA224withDSA、SHA256withDSA、SHA384withDSA和SHA512withDSA这五种DSA数字签名算法。</p>\n<p>代码示例（只需将上面的例子算法替换下就好，并且注意秘钥的长度范围）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RsaSignatureDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"string\">&quot;mrbird&#x27;s blog&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 非对称加密算法</span></span><br><span class=\"line\">        String algorithm = <span class=\"string\">&quot;DSA&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 签名算法，DSA+SHA</span></span><br><span class=\"line\">        String signAlgorithm = <span class=\"string\">&quot;SHA224withDSA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 公私钥生成 --------</span></span><br><span class=\"line\">        <span class=\"comment\">// 实例化秘钥对生成器</span></span><br><span class=\"line\">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，秘钥长度512~1024位，64倍数</span></span><br><span class=\"line\">        keyPairGenerator.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成秘钥对</span></span><br><span class=\"line\">        KeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">        <span class=\"comment\">// 公钥</span></span><br><span class=\"line\">        PublicKey publicKey = keyPair.getPublic();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DSA公钥: &quot;</span> + Base64.getEncoder().encodeToString(publicKey.getEncoded()));</span><br><span class=\"line\">        <span class=\"comment\">// 私钥</span></span><br><span class=\"line\">        PrivateKey privateKey = keyPair.getPrivate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DSA私钥: &quot;</span> + Base64.getEncoder().encodeToString(privateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 私钥加签 ---------</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取签名对象</span></span><br><span class=\"line\">        Signature signature = Signature.getInstance(signAlgorithm);</span><br><span class=\"line\">        signature.initSign(privateKey);</span><br><span class=\"line\">        signature.update(value.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sign = signature.sign();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;签名值: &quot;</span> + Base64.getEncoder().encodeToString(sign));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ----- 公钥验签 ---------</span></span><br><span class=\"line\">        signature.initVerify(publicKey);</span><br><span class=\"line\">        signature.update(value.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;验签结果: &quot;</span> + signature.verify(sign));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DSA公钥: MIIBtzCCASwGByqGSM44BAEwggEfAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f6AR7ECLCT7up1/63xhv4O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuEC/BYHPUCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdRWVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoDgYQAAoGAcW0aiebAWi5M18Lu6QS/1OoHbtw2I7kyivwExbNAZpWR9I9sNIwE1T0a491t1oqRV1cdBHyd9jiJqFwfLG6k5QidasXTgGYSsSZqFBebP5nrF5q3RtkosoHeHVKDnShQf5b36NK53CpCRfLayk2e5inu7CCCo+a58piAMiF3c+k=</span><br><span class=\"line\">DSA私钥: MIIBTAIBADCCASwGByqGSM44BAEwggEfAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f6AR7ECLCT7up1/63xhv4O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuEC/BYHPUCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdRWVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoEFwIVAIv03r5wR+DolDC5bGFOqQ2vuHlo</span><br><span class=\"line\">签名值: MCwCFBRba/HI5/tLt+exzpgvLoq5mAwaAhQvaVv4dbGFNtMpcI4ZeqjgAGeGyg==</span><br><span class=\"line\">验签结果: true</span><br></pre></td></tr></table></figure>\n","prev":{"title":"测试代码语法高亮","link":"b5cb8be0"},"next":{"title":"ioasnfoniofnais","link":"3fa6e885"},"plink":"http://www.chenyuxi.top/java-digital-signature-algorithm/","toc":[{"id":"rsa","title":"RSA","index":"1"},{"id":"dsa","title":"DSA","index":"2"}],"copyright":{"author":"陈予希","link":"<a href=\"http://www.chenyuxi.top/java-digital-signature-algorithm/\" title=\"Java 数字签名算法\">http://www.chenyuxi.top/java-digital-signature-algorithm/</a>","license":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a> 许可协议。欢迎转载，但请注明出处！🤗"}}