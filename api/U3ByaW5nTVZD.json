{"title":"SpringMVC","date":"2021-12-20T20:07:38.421Z","date_formatted":{"ll":"2021年12月20日","L":"2021/12/20","MM-DD":"12-20"},"link":"SpringMVC","tags":["spring mvc"],"categories":["spring mvc"],"updated":"2021-12-20T12:32:23.513Z","content":"<h1 id=\"spring-mvc\">Spring MVC<a title=\"#spring-mvc\" href=\"#spring-mvc\"></a></h1>\n<h2 id=\"入门\">入门<a title=\"#入门\" href=\"#入门\"></a></h2>\n<h3 id=\"概述\">概述<a title=\"#概述\" href=\"#概述\"></a></h3>\n<p><code>Spring MVC</code>是<code>Spring</code>提供的一个 实现了Web MVC设计模式的 轻量级Web框架。 Spring MVC具有如下特点 :</p>\n<ol>\n<li>支持国际化。</li>\n<li>支持多种视图技术。</li>\n<li>灵活性强，易于与其它框架集成。</li>\n<li>内置常见效验器，可以效验用户输入。</li>\n<li>可自动绑定用户输入，并正确的转换数据类型。</li>\n<li>使用基于XML的配置文件，编写后无需重新编译应用程序。</li>\n<li>提供了一个前端控制器<code>DispatcherServlet</code>，使开发人员无须额外开发控制器对象。</li>\n<li>…</li>\n</ol>\n<h3 id=\"dispatcherservlet\">DispatcherServlet<a title=\"#dispatcherservlet\" href=\"#dispatcherservlet\"></a></h3>\n<p>Spring MVC 框架围绕DispatcherServlet 设计。DispatcherServlet 的<strong>作用是将请求分发到不同的处理器</strong>。</p>\n<p>从Spring 2.5开始，使用Java 5 及以上版本的用户可以采用基于注解的Controller 声明方式。</p>\n<p>Spring MVC 框架像许多其他MVC 框架一样，以请求为驱动 ，围绕一个中心Servlet分派请求及提供其他功能。</p>\n<p>DispatcherServlet<strong>其本质是一个符合J2EE规范的标准Servler</strong> (它继承自HttpServlet 基类)。</p>\n<h3 id=\"工作流程\">工作流程<a title=\"#工作流程\" href=\"#工作流程\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpringMVC 工作流程：</span><br><span class=\"line\">01、用户发送出请求到前端控制器DispatcherServlet。</span><br><span class=\"line\">02、DispatcherServlet收到请求调用HandlerMapping（处理器映射器）。</span><br><span class=\"line\">03、HandlerMapping找到具体的处理器(可查找xml配置或注解配置)，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</span><br><span class=\"line\">04、DispatcherServlet调用HandlerAdapter（处理器适配器）。</span><br><span class=\"line\">05、HandlerAdapter经过适配调用具体的处理器（Handler/Controller）。</span><br><span class=\"line\">06、Controller执行完成返回ModelAndView对象。</span><br><span class=\"line\">07、HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。</span><br><span class=\"line\">08、DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）。</span><br><span class=\"line\">09、ViewReslover解析后返回具体View（视图）。</span><br><span class=\"line\">10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</span><br><span class=\"line\">11、DispatcherServlet响应用户。</span><br></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<img src=\"https://i.loli.net/2021/01/13/PX1JLgbDvxe2rnd.png\" alt=\"image-20210113190447420\" style=\"zoom: 67%;\" />\n<p>图自：<a href=\"https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/HexoBackup/source/_posts/Hi-SpringMVC.md\">https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/HexoBackup/source/_posts/Hi-SpringMVC.md</a></p>\n<p>Spring MVC 运行时序图可参考：</p>\n<ul>\n<li><a href=\"https://www.processon.com/view/5e7376c2e4b03b99652516aa\">https://www.processon.com/view/5e7376c2e4b03b99652516aa</a></li>\n<li><a href=\"https://blog.csdn.net/programme_girl/article/details/78241360\">https://blog.csdn.net/programme_girl/article/details/78241360</a></li>\n</ul>\n<h2 id=\"hello-world\">Hello World<a title=\"#hello-world\" href=\"#hello-world\"></a></h2>\n<h3 id=\"普通servlet版\">普通Servlet版<a title=\"#普通servlet版\" href=\"#普通servlet版\"></a></h3>\n<p>先用以前的方式写一个Hello World，回顾一下并方便对比区别。</p>\n<p>IDEA 新建一个 Module。</p>\n<p>然后添加Web 支持，这时会在项目模块内多出一个Web 文件夹：</p>\n<img src=\"https://i.loli.net/2021/01/12/k4bqaFTtsKdfn8j.png\" alt=\"image-20210112210936928\" style=\"zoom:67%;\" />\n<p>注：通过 添加框架支持-Web 应用，这种方式生成的Web 文件夹，可能缺少<code>lib</code>子文件夹。会导致依赖包没有导出，报404。</p>\n<p>解决方法：</p>\n<img src=\"https://i.loli.net/2021/01/13/4znLVoYlgjIkuX6.png\" alt=\"image-20210113192242489\" style=\"zoom:67%;\" />\n<p>接着引入依赖，可以引入到父工程，方便子工程继承：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Servlet、JSP、JSTL 所需依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建Servlet <code>com.chenyuxi.servlet.TestServlet</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(value = &quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request， HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException， IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doGet(request，response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request， HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException， IOException </span>&#123;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(request，response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建JSP <code>WEB-INF/jsp/hello.jsp</code></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        Hello World! - Servlet</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置版\">配置版<a title=\"#配置版\" href=\"#配置版\"></a></h3>\n<p>使用Spring MVC，第一步先引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Spring MVC--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看别人的笔记，SpringMVC 引入了两个包，除了<code>spring-webmvc</code>，还有一个groupId 和 version 都相同的叫做<code>spring-web</code>的包。</p>\n<p>有点疑惑，遂删了试一下，运行正常。搜了一下，发现<code>spring-webmvc</code> <strong>依赖于</strong> 且 <strong>将隐式引入</strong> <code>spring-web</code>包。</p>\n<p>具体原文参考：<a href=\"https://stackoverflow.com/questions/13533700/maven-dependency-spring-web-vs-spring-webmvc\">https://stackoverflow.com/questions/13533700/maven-dependency-spring-web-vs-spring-webmvc</a></p>\n</blockquote>\n<p>然后在<code>web.xml</code>配置<code>DispatcherServlet</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.注册DispatcherServlet，负责处理所有请求--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring_mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--初始化时加载配置参数--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--容器启动时立即加载此Servlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 匹配所有的请求 ([/]:不包括.jsp  [/*]:包括.jsp  但两者都会匹配静态资源*.js，*.html等)--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring_mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着在IoC上下文容器配置其他组件，<code>resources/springmvc-servlet.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--2.HandlerMapping 映射器--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--根据配置或者注解找到最终要执行的Handler--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--3.ControllerHandlerAdapter 适配器--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--根据Handler规则执行不同类型的Handler，返回ModelAndView--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--4.视图解析器--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--将ModelAndView 逻辑视图 解析成 真正的视图 国际化处理 返回View--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--最后 DispatcherServlet 会渲染视图，将Model 数据转为response 响应--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--前缀--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--后缀--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Handler--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;/hello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.chenyuxi.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>com.chenyuxi.controller.HelloController</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest httpServletRequest， HttpServletResponse httpServletResponse)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ModelAndView 模型和视图</span></span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 封装对象，放在ModelAndView中。Model</span></span><br><span class=\"line\">        mv.addObject(<span class=\"string\">&quot;msg&quot;</span>， <span class=\"string\">&quot;Hello World! - Spring MVC&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 封装要跳转的视图，放在ModelAndView中</span></span><br><span class=\"line\">        mv.setViewName(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 HelloController 返回一个 <code>ModelAndView</code>，根据上面的Spring MVC 工作时序图可得知最后会被 视图解析器<code>ViewResolver </code>渲染。</p>\n<p>其<code>ViewName</code>为 <code>hello</code>，url 会根据前后缀被拼接为<code>WEB-INF/jsp/hello.jsp</code>。</p>\n<p>并带上我们添加的对象<code>msg</code>，转发到拼接后的<code>url</code>。</p>\n<p>在jsp里，可以直接用<code>EL 表达式</code>访问此对象：</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        $&#123;msg&#125;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>浏览器输入URL 看到效果：</p>\n<img src=\"https://i.loli.net/2021/01/13/EUPStmg4uT5pxCX.png\" alt=\"image-20210113210540686\" style=\"zoom:67%;\" />\n<h3 id=\"注解版\">注解版<a title=\"#注解版\" href=\"#注解版\"></a></h3>\n<p>上述方法较为麻烦，下面来看一下注解版：</p>\n<p>首先<code>Web.xml</code>配置<code>DispatcherServler</code>不变。</p>\n<p>IoC上下文容器配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--自动扫描bean--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.chenyuxi.controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       支持mvc注解驱动</span></span><br><span class=\"line\"><span class=\"comment\">       在spring中一般采用@RequestMapping 注解来完成映射关系 要想使@RequestMapping 注解生效</span></span><br><span class=\"line\"><span class=\"comment\">       必须向上下文中注册DefaultAnnotationHandlerMapping 和AnnotationMethodHandlerAdapter 实例</span></span><br><span class=\"line\"><span class=\"comment\">       这两个实例分别在类级别和方法级别处理，而annotation-driven 帮助我们自动完成上述两个实例的注入</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--视图解析器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>com.chenyuxi.controller.HelloController</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 真实访问地址: &#123;项目名&#125;/HelloController/hello</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>， <span class=\"string\">&quot;hello，SpringMVC&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// WEB-INF/jsp/hello.jsp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器输入URL 即可看到效果：</p>\n<img src=\"https://i.loli.net/2021/01/13/iW9DloYsCMaJZGr.png\" alt=\"image-20210113202247280\" style=\"zoom: 67%;\" />\n<h2 id=\"controller\">Controller<a title=\"#controller\" href=\"#controller\"></a></h2>\n<ul>\n<li>控制器负责提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>\n<li>控制器负责解析用户的请求并将其转换为一个模型。</li>\n<li>在Spring MVC中一个控制器类可以包含多个方法。</li>\n<li>在Spring MVC中，对于Controller的配置方式有很多种。</li>\n</ul>\n<h3 id=\"实现接口方式\">实现接口方式<a title=\"#实现接口方式\" href=\"#实现接口方式\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXXXController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest Request， HttpServletResponse Response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现接口Controller定义控制器是较老的办法。</p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller。</li>\n<li>定义的方式比较麻烦。</li>\n</ul>\n<h3 id=\"注解方式\">注解方式<a title=\"#注解方式\" href=\"#注解方式\"></a></h3>\n<p>使用注解<code>@Controller</code>声明被标注的类是一个控制器。</p>\n<p>Spring 可以使用扫描机制来找到应用程序中所有基于注解的控制器类。</p>\n<p>为了保证Spring能找到控制器，需要在配置文件中声明组件扫描。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"requestmapping\">RequestMapping<a title=\"#requestmapping\" href=\"#requestmapping\"></a></h2>\n<h3 id=\"注解位置\">注解位置<a title=\"#注解位置\" href=\"#注解位置\"></a></h3>\n<p><code>@RequestMapping</code>注解可用于控制器类的<strong>类</strong>或<strong>方法</strong>上。</p>\n<p>如果标注于类上，表示类中的所有响应请求的方法都是<strong>以其<code>name</code>属性作为父路径</strong>。</p>\n<p>e.g.：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>则其URL 为 <code>&#123;项目名&#125;/HelloController/hello</code>。</p>\n<h3 id=\"注解属性\">注解属性<a title=\"#注解属性\" href=\"#注解属性\"></a></h3>\n<p><code>@RequestMapping</code> 注解常用的属性有四个：<code>value/path</code>、<code>method</code>、<code>params</code>、<code>headers</code>。</p>\n<ul>\n<li>\n<p>value/path：<strong>请求路径</strong></p>\n<ul>\n<li>\n<p>支持通配符：</p>\n</li>\n<li>\n<pre><code class=\"language-java\">@GetMapping(&quot;/a/*&quot;) //请求地址可以是/a/xxxxxx\n@GetMapping(&quot;/a/*/c&quot;) //请求地址可以是/a/xxxxxx/c\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- method：**限制请求方式**</span><br><span class=\"line\"></span><br><span class=\"line\">  - RequestMethod.GET</span><br><span class=\"line\">  - RequestMethod.POST</span><br><span class=\"line\">  - RequestMethod.DELETE</span><br><span class=\"line\">  - RequestMethod.HEAD</span><br><span class=\"line\">  - RequestMethod.OPTIONS</span><br><span class=\"line\">  - RequestMethod.PATCH</span><br><span class=\"line\">  - RequestMethod.PUT</span><br><span class=\"line\">  - RequestMethod.TRACE</span><br><span class=\"line\"></span><br><span class=\"line\">- params：**限制请求参数**</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```java</span><br><span class=\"line\">    // 指定了age = 2，则 age 必须 为2</span><br><span class=\"line\">    @RequestMapping(value = &quot;/hello&quot;，method = RequestMethod.GET，params = &#123;&quot;name&quot;，&quot;age=2&quot;&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 请求方式：&#123;host&#125;/&#123;project_name&#125;/hello?name=chenyuxi&amp;age=18</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>headers：<strong>限制请求头数据</strong></p>\n<ul>\n<li>\n<pre><code class=\"language-java\">@RequestMapping(value = &quot;/hello&quot;，method = RequestMethod.GET，headers =&quot;Connection=keep-alive&quot;)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 组合注解</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Spring 4.3 引入了方法级注解的变体，也被叫做 @RequestMapping 的组合注解。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 它们所扮演的角色就是针对 @RequestMapping 的封装，而且成了定义端点的标准方法。 </span><br><span class=\"line\"></span><br><span class=\"line\">例如，`@GetMapping` 是一个组合注解，它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</span><br><span class=\"line\"></span><br><span class=\"line\">诸如此类的组合注解有：</span><br><span class=\"line\"></span><br><span class=\"line\">- @GetMapping</span><br><span class=\"line\">- @PostMapping</span><br><span class=\"line\">- @PutMapping</span><br><span class=\"line\">- @DeleteMapping</span><br><span class=\"line\">- @PatchMapping</span><br><span class=\"line\"></span><br><span class=\"line\">尽管每个变体都可以使用带有方法属性的 @RequestMapping 注解来互换实现，但组合变体仍然是一种最佳的实践。</span><br><span class=\"line\"></span><br><span class=\"line\">这主要是因为组合注解**减少了在应用程序上要配置的元数据**，并且**组合注解可以更好的表达被注解方法的语义**。 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### @PathVariable</span><br><span class=\"line\"></span><br><span class=\"line\">在Spring MVC中可以使用  `@PathVariable` 注解，让方法**参数的值**对应绑定到一个URL**模板变量**上。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">使用路径变量，路径会变得更加简洁，获得参数会更加方便，并且框架会自动进行类型转换。</span><br><span class=\"line\"></span><br><span class=\"line\">通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法。</span><br><span class=\"line\"></span><br><span class=\"line\">如下面例子访问是的路径是/commit/1/a，则结果是路径与方法不匹配（通常返回 400 状态码），而不会是参数转换失败。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">e.g.：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class RestFulController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   // 映射访问路径</span><br><span class=\"line\">   @RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class=\"line\">   public String index(@PathVariable int p1， @PathVariable int p2， Model model)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       int result = p1 + p2;</span><br><span class=\"line\">       </span><br><span class=\"line\">       // Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br><span class=\"line\">       model.addAttribute(&quot;msg&quot;， &quot;结果：&quot; + result);</span><br><span class=\"line\">       </span><br><span class=\"line\">       // 返回视图位置</span><br><span class=\"line\">       return &quot;test&quot;;</span><br><span class=\"line\">       </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>此时访问url <code>host/commit/1/2</code>，正常情况下显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结果：3</span><br></pre></td></tr></table></figure>\n<p>此注解有两个属性：</p>\n<ul>\n<li>value/name：要绑定到的路径变量的名称。</li>\n<li>require：指示路径变量是否为必需。</li>\n</ul>\n<h2 id=\"restful\">RESTful<a title=\"#restful\" href=\"#restful\"></a></h2>\n<h3 id=\"概念\">概念<a title=\"#概念\" href=\"#概念\"></a></h3>\n<p>REST这个词，是<a href=\"http://en.wikipedia.org/wiki/Roy_Fielding\" target=\"_blank\">Roy Thomas Fielding</a>在他2000年的<a href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\" target=\"_blank\">博士论文</a>中提出的。翻译过来就是&quot;表现层状态转化&quot;。</p>\n<p>RESTful 是一个资源定位及资源操作的风格。不是标准、规范也不是协议，只是一种风格。</p>\n<p>基于这个风格设计的API 可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<h3 id=\"最佳实践\">最佳实践<a title=\"#最佳实践\" href=\"#最佳实践\"></a></h3>\n<p>以下摘自 文末<a href=\"#%E5%8F%82%E8%80%83\">参考</a> [RESTful API 最佳实践 - 阮一峰] 部分。</p>\n<h4 id=\"一、url-设计\">一、URL 设计<a title=\"#一、url-设计\" href=\"#一、url-设计\"></a></h4>\n<h5 id=\"1.1-动词-+-宾语\">1.1 动词 + 宾语<a title=\"#1.1-动词-+-宾语\" href=\"#1.1-动词-+-宾语\"></a></h5>\n<p>RESTful 的核心思想就是，客户端发出的数据操作指令都是&quot;<strong>动词 + 宾语</strong>&quot;的结构。</p>\n<p>比如，<code>GET /articles</code>这个命令，<code>GET</code>是动词，<code>/articles</code>是宾语。</p>\n<p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p>\n<blockquote>\n<ul>\n<li>GET：读取（Read）</li>\n<li>POST：新建（Create）</li>\n<li>PUT：更新（Update）</li>\n<li>PATCH：更新（Update），通常是部分更新</li>\n<li>DELETE：删除（Delete）</li>\n</ul>\n</blockquote>\n<p>根据 HTTP 规范，动词一律大写。</p>\n<h5 id=\"1.2-动词的覆盖\">1.2 动词的覆盖<a title=\"#1.2-动词的覆盖\" href=\"#1.2-动词的覆盖\"></a></h5>\n<p>有些客户端只能使用<code>GET</code>和<code>POST</code>这两种方法。服务器必须接受<code>POST</code>模拟其他三个方法（<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>）。</p>\n<p>这时，客户端发出的 HTTP 请求，要加上<code>X-HTTP-Method-Override</code>属性，告诉服务器应该使用哪一个动词，覆盖<code>POST</code>方法。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /api/Person/4 HTTP/1.1 </span><br><span class=\"line\"><span class=\"attribute\">X-HTTP-Method-Override</span><span class=\"punctuation\">: </span>PUT</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>X-HTTP-Method-Override</code>指定本次请求的方法是<code>PUT</code>，而不是<code>POST</code>。</p>\n<h5 id=\"1.3-宾语必须是名词\">1.3 宾语必须是名词<a title=\"#1.3-宾语必须是名词\" href=\"#1.3-宾语必须是名词\"></a></h5>\n<p>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，<code>/articles</code>这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</p>\n<blockquote>\n<ul>\n<li>/getAllCars</li>\n<li>/createNewCar</li>\n<li>/deleteAllRedCars</li>\n</ul>\n</blockquote>\n<h5 id=\"1.4-复数-url\">1.4 复数 URL<a title=\"#1.4-复数-url\" href=\"#1.4-复数-url\"></a></h5>\n<p>既然 URL 是名词，那么应该使用复数，还是单数？</p>\n<p>这没有统一的规定，但是常见的操作是读取一个集合，比如<code>GET /articles</code>（读取所有文章），这里明显应该是复数。</p>\n<p>为了统一起见，建议都使用复数 URL，比如<code>GET /articles/2</code>要好于<code>GET /article/2</code>。</p>\n<h5 id=\"1.5-避免多级-url\">1.5 避免多级 URL<a title=\"#1.5-避免多级-url\" href=\"#1.5-避免多级-url\"></a></h5>\n<p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /authors/12/categories/2</span><br></pre></td></tr></table></figure>\n<p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。</p>\n<p>更好的做法是，<strong>除了第一级，其他级别都用查询字符串表达</strong>。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /authors/12?categories=2</span><br></pre></td></tr></table></figure>\n<p>下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /articles/published</span><br></pre></td></tr></table></figure>\n<p>查询字符串的写法明显更好。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /articles?published=true</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、状态码\">二、状态码<a title=\"#二、状态码\" href=\"#二、状态码\"></a></h4>\n<p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\n<blockquote>\n<ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>\n</ul>\n</blockquote>\n<h4 id=\"三、服务器回应\">三、服务器回应<a title=\"#三、服务器回应\" href=\"#三、服务器回应\"></a></h4>\n<h5 id=\"3.1-不要返回纯文本\">3.1 不要返回纯文本<a title=\"#3.1-不要返回纯文本\" href=\"#3.1-不要返回纯文本\"></a></h5>\n<p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的<code>Content-Type</code>属性要设为<code>application/json</code>。</p>\n<p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的<code>ACCEPT</code>属性也要设成<code>application/json</code>。下面是一个例子。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /orders/2 HTTP/1.1 </span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>application/json</span><br></pre></td></tr></table></figure>\n<h5 id=\"3.2-发生错误时，不要返回-200-状态码\">3.2 发生错误时，不要返回 200 状态码<a title=\"#3.2-发生错误时，不要返回-200-状态码\" href=\"#3.2-发生错误时，不要返回-200-状态码\"></a></h5>\n<p>略。很严谨，但目前阶段小项目没必要。可以再原文参考。</p>\n<h5 id=\"3.3-提供链接\">3.3 提供链接<a title=\"#3.3-提供链接\" href=\"#3.3-提供链接\"></a></h5>\n<p>略。很好但很麻烦，不知道有没有自动生成HATEOAS 的技术，大型项目总不可能手动写吧… 挖个坑先以后填。</p>\n<h3 id=\"api文档、测试工具\">API文档、测试工具<a title=\"#api文档、测试工具\" href=\"#api文档、测试工具\"></a></h3>\n<p>这俩玩应没来得及研究，先mark一下，有空填坑。</p>\n<p><a href=\"https://github.com/Liaoct/blog/blob/master/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%EF%BC%8C%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF%E4%BA%BA%E5%91%98%E5%A6%82%E4%BD%95%E5%90%88%E4%BD%9C%EF%BC%9F.md\" target=\"_blank\">前后端分离模式下，前端与后端人员如何合作？.md</a></p>\n<h4 id=\"swagger\">Swagger<a title=\"#swagger\" href=\"#swagger\"></a></h4>\n<p><a href=\"https://swagger.io/\">https://swagger.io/</a></p>\n<p><a href=\"https://blog.csdn.net/panda_In5/article/details/78843205\" target=\"_blank\">一分钟 SSM框架集成 swagger</a></p>\n<h4 id=\"eolinker\">Eolinker<a title=\"#eolinker\" href=\"#eolinker\"></a></h4>\n<p><a href=\"https://www.eolinker.com/\">https://www.eolinker.com/</a></p>\n<h3 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h3>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\">理解RESTful架构 - 阮一峰</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\">RESTful API 设计指南 - 阮一峰</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html\" target=\"_blank\">RESTful API 最佳实践 - 阮一峰</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%B9%82%E7%AD%89\" target=\"_blank\">幂等 - MDN Web Docs</a></p>\n<p><a href=\"https://juejin.cn/post/6844903446886219784\" target=\"_blank\">如何理解 RESTful 的幂等性 - 掘金</a></p>\n<h2 id=\"controller-视图跳转\">Controller 视图跳转<a title=\"#controller-视图跳转\" href=\"#controller-视图跳转\"></a></h2>\n<blockquote>\n<p>以下参考：<a href=\"https://juejin.cn/post/6844903838332239879\">https://juejin.cn/post/6844903838332239879</a></p>\n</blockquote>\n<h3 id=\"modelandview\">ModelAndView<a title=\"#modelandview\" href=\"#modelandview\"></a></h3>\n<p>以前前后端不分的情况下，ModelAndView 应该是最最常见的返回值类型了，现在前后端分离后，后端都是以返回 JSON 数据为主了。</p>\n<p>后端返回 ModelAndView 这个比较容易理解，开发者可以在 ModelAndView 对象中指定视图名称，然后也可以绑定数据，像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/book&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">getAllBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Book&gt; books = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Book b1 = <span class=\"keyword\">new</span> Book();</span><br><span class=\"line\">    b1.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">    b1.setName(<span class=\"string\">&quot;三国演义&quot;</span>);</span><br><span class=\"line\">    b1.setAuthor(<span class=\"string\">&quot;罗贯中&quot;</span>);</span><br><span class=\"line\">    books.add(b1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Book b2 = <span class=\"keyword\">new</span> Book();</span><br><span class=\"line\">    b2.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">    b2.setName(<span class=\"string\">&quot;红楼梦&quot;</span>);</span><br><span class=\"line\">    b2.setAuthor(<span class=\"string\">&quot;曹雪芹&quot;</span>);</span><br><span class=\"line\">    books.add(b2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//指定数据模型</span></span><br><span class=\"line\">    mv.addObject(<span class=\"string\">&quot;bs&quot;</span>， books);</span><br><span class=\"line\">    mv.setViewName(<span class=\"string\">&quot;book&quot;</span>);<span class=\"comment\">//指定视图名</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果将通过视图解析器**转发(默认)**到指定页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p>\n<p>也可以通过指定<code>ViewName</code>前缀<code>redirect:</code>来重定向到指定页面。</p>\n<h3 id=\"servlet\">Servlet<a title=\"#servlet\" href=\"#servlet\"></a></h3>\n<p>使用Servlet 方式，不需要视图解析器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span> <span class=\"meta\">@RequestMapping(&quot;/Servlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletJumpController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">(HttpServletRequest request， HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        response.getWriter().println(<span class=\"string\">&quot;通过HttpServletResponse进行输出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">(HttpServletRequest request， HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        response.sendRedirect(<span class=\"string\">&quot;/3/forward.jsp&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t3&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">(HttpServletRequest request， HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException， ServletException </span>&#123;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/redirect.jsp&quot;</span>).forward(request，response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回 <code>void</code>，然后可以直接使用<code>request / response</code> 进行输出、转发、重定向。</p>\n<h3 id=\"springmvc\">SpringMVC<a title=\"#springmvc\" href=\"#springmvc\"></a></h3>\n<p>如果<code>Mapping</code>方法的返回类型是<code>String</code> ，SpringMVC 会自动对以下几种自动进行处理。</p>\n<p>有无视图解析器会直接影响到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span> <span class=\"meta\">@RequestMapping(&quot;SpringMVC&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringMvcJumpController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 有视图解析器会自动拼接前后缀</span></span><br><span class=\"line\">        <span class=\"comment\">// return &quot;forward&quot;;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 无视图解析器直接转发</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;/forward.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/forward.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/t3&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重定向</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/redirect.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"controller-参数绑定\">Controller 参数绑定<a title=\"#controller-参数绑定\" href=\"#controller-参数绑定\"></a></h2>\n<blockquote>\n<p>以下参考：</p>\n<ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\">四种常见的POST提交数据方式</a></li>\n<li><a href=\"https://www.guoyuchuan.com/java/springmvc/2018/09/10/springmvc%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/\" target=\"_blank\">springmvc接收参数的几种方式</a></li>\n</ul>\n</blockquote>\n<p>以下请求方式都需要为<code>application/x-www-form-urlencoded</code>，即<code>?name=tom&amp;age=18</code>这种键值对形式。</p>\n<h3 id=\"属性名\">属性名<a title=\"#属性名\" href=\"#属性名\"></a></h3>\n<p>通过属性名接收参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Test1</span><span class=\"params\">(String username， String password)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username + <span class=\"string\">&quot;，&quot;</span> + password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SpringMVC 会根据方法参数名寻找对应请求参数，请求若没有对应参数，则方法参数为<code>Null</code>。</p>\n<h3 id=\"bean-对象\">Bean 对象<a title=\"#bean-对象\" href=\"#bean-对象\"></a></h3>\n<p>通过<code>Bean</code> 对象接收参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book book;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Test2</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user.getUsername() + <span class=\"string\">&quot;，&quot;</span> + user.getPassword() + <span class=\"string\">&quot;，&quot;</span> + user.getBook().getName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数为一个Bean 对象时，spring mvc会尝试将值注入到对应同名属性。</p>\n<p>通过Bean 来接收请求数据，<strong>必须要有set方法</strong>，请求参数名不对应或没有set方法，则为Null。</p>\n<p>使用此方式接收请求数据，还支持<strong>级联赋值</strong>，比如上述例子在<code>User</code>对象的属性里还有一个<code>Book</code>对象，</p>\n<p>可以使用 <em>?username=admin&amp;password=666&amp;<strong>book.name=Tom</strong></em>形式进行级联传参。</p>\n<h3 id=\"httpservletrequest\">HttpServletRequest<a title=\"#httpservletrequest\" href=\"#httpservletrequest\"></a></h3>\n<p>当然也可以使用原来HttpServlet 的方式来接收请求参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/t3&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Test3</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    String password = request.getParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username + <span class=\"string\">&quot;，&quot;</span> + password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不常用，需要自己处理类型转换和异常。</p>\n<h3 id=\"@pathvariable\">@PathVariable<a title=\"#@pathvariable\" href=\"#@pathvariable\"></a></h3>\n<p>使用<code>@PathVariable</code> 注解来接收参数，会将请求路径中对应的数据注入到方法参数中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;/t4/&#123;username&#125;/&#123;password&#125;&quot;，</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;/t4/&#123;username&#125;/&#123;password&#125;/&#123;role&#125;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Test4</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@PathVariable</span> String username，</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@PathVariable(value = &quot;password&quot;)</span> String cipher，</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@PathVariable(required = false)</span> String role</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> username + <span class=\"string\">&quot;，&quot;</span> + cipher + <span class=\"string\">&quot;，&quot;</span> + role;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果方法参数名和路径变量名不对应，可以使用<code>name/value</code>指定。</p>\n<p>如果一个参数不是必须的，可以先在<code>@RequestMapping</code> 中指定多个<code>value</code>，然后将对应参数注解的<code>required</code> 设为 <code>false</code>。</p>\n<h3 id=\"@requestparam\">@RequestParam<a title=\"#@requestparam\" href=\"#@requestparam\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/t5&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Test5</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    String username，</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@RequestParam(value = &quot;password&quot;)</span> String cipher，</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@RequestParam(defaultValue = &quot;18&quot;)</span> String age，</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@RequestParam(required = false)</span> String role</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过@RequestParam 获取请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> username + <span class=\"string\">&quot;，&quot;</span> + cipher + <span class=\"string\">&quot;，&quot;</span> + age + <span class=\"string\">&quot;，&quot;</span> + role;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不需要用到<code>@RequestParam</code> 中的属性可以直接使用属性名形式接收数据。</p>\n<p>如果方法参数名和请求数据名不对应，可以使用<code>name/value</code>指定。</p>\n<p>参数默认不能为空，如果有需求，可以将<code>required</code> 设为 <code>false</code>。</p>\n<p>与<code>@PathVariable</code> 的属性有一点不同的是，<code>defaultValue</code>可以为其设置默认值。</p>\n<h2 id=\"返回-string-乱码\">返回 String 乱码<a title=\"#返回-string-乱码\" href=\"#返回-string-乱码\"></a></h2>\n<p>Spring MVC的<code>StringHttpMessageConverter</code>，默认编码是<code>ISO-8859-1</code>。</p>\n<p>但其提供了对应的有参构造方法：</p>\n<p><img src=\"https://i.loli.net/2021/01/21/VbG1kDf9a6RvC8W.png\" alt=\"image-20210121222111720\" loading=\"lazy\" class=\"φbp\"></p>\n<p>所以，解决办法：</p>\n<ul>\n<li>先在Web.xml 配置过滤器（这一步已经可以解决部分乱码了，例如Jsp 传参乱码）：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Spring Web 自带的字符编码过滤器，统一编码为UTF-8--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后在Spring 容器上下文配置String 消息转换器，覆盖默认编码类型：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultCharset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"返回-json\">返回 JSON<a title=\"#返回-json\" href=\"#返回-json\"></a></h2>\n<p>这个小章节看上去简单但知识量其实不算少。</p>\n<p>因为喜欢追根究底~~(钻牛角尖)<s>，故花了较多时间研究</s>(踩了很多坑)~~。</p>\n<p>首先这是下面用到的JavaBean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book book;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.使用jackson-返回-json-字符串\">1.使用Jackson 返回 Json 字符串<a title=\"#1.使用jackson-返回-json-字符串\" href=\"#1.使用jackson-返回-json-字符串\"></a></h3>\n<p>Jackson 是 maven 仓库存储库中下载量最多的Java Json解析库。</p>\n<p>Jackson 是 SpringMVC 的默认Json解析器。</p>\n<p>自己使用Jackson来将JavaBean转为Json字符串， 需要先引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jackson-databind.version</span>&gt;</span>2.9.8<span class=\"tag\">&lt;/<span class=\"name\">jackson-databind.version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jackson-databind.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完整的Jackson 依赖有三个jar 包，但只要引入一个<code>jackson-databind</code>就够了，剩下的<code>jackson-core</code>和<code>jackson-annotations</code>是传递依赖，会被maven 隐式引入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t1&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;汤姆&quot;</span>， <span class=\"string\">&quot;123456&quot;</span>， <span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;西游记&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> objectMapper.writeValueAsString(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ObjectMapper</code> 是Jackson 的对象映射器，调用其<code>writeValueAsString()</code>方法可将Java 对象直接转换为 <code>Json 字符串</code>，效果：</p>\n<img src=\"https://i.loli.net/2021/01/21/2UNA9wfDpHqBtCZ.png\" alt=\"image-20210121222440363\" style=\"zoom:67%;\" />\n<p>就是这里，坑了老子好久，看图，注意标注位置：</p>\n<img src=\"https://i.loli.net/2021/01/21/NEYqHOFdnPW6mb4.png\" alt=\"image-20210121222702602\" style=\"zoom: 67%;\" />\n<p>因为控制器返回的是String 类型，经过了<code>StringHttpMessageConverter</code>，所以其<code>Content-Type</code>为<code>text/html;charset=UTF-8</code>，不是一个标准的<code>Json类型Http响应</code>，而是一个<code>Json字符串</code>。</p>\n<p>但标准前后端分离模式应该返回<code>application/json;charset=UTF-8</code>。</p>\n<p>对于单个RequestMapping ，可以设置<code>produces</code>属性将其修改为一个Json 类型响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/t1&quot;，produces = &quot;application/json;charset=UTF-8&quot;)</span></span><br></pre></td></tr></table></figure>\n<p>对于全局的转换方法暂没有找到有效的，找了一个多小时，脑壳都昏了，想着又不是搞科研的，不折磨自己了。</p>\n<h3 id=\"2.使用httpservlet-直接输出\">2.使用HttpServlet 直接输出<a title=\"#2.使用httpservlet-直接输出\" href=\"#2.使用httpservlet-直接输出\"></a></h3>\n<p>这种方式，较为灵活~~(较为原始)~~，但方法较多时，同样也不简洁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t5&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test5</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;汤姆&quot;</span>， <span class=\"string\">&quot;123456&quot;</span>， <span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;西游记&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">    String s = objectMapper.writeValueAsString(user);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.setContentType(<span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">    response.getWriter().print(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以直接将以下 ServletAPI 作为Handler 方法参数，SpringMVC 会自动将值注入：</p>\n<ul>\n<li>HttpServletRequest</li>\n<li>HttpServletRespons</li>\n<li>HttpSession</li>\n<li>InputStream</li>\n<li>OutputStream</li>\n<li>Reader</li>\n<li>Outer</li>\n</ul>\n<h3 id=\"3.直接返回object\">3.直接返回Object<a title=\"#3.直接返回object\" href=\"#3.直接返回object\"></a></h3>\n<p>如果使用 <code>@RestController</code> 或 <code>@ResponseBody 注解</code>，直接返回<code>JavaBean</code>、<code>Map</code>、<code>List</code>，Spring MVC 默认会使用内置Jackson 将其转为Json 响应。</p>\n<h4 id=\"javabean\">JavaBean<a title=\"#javabean\" href=\"#javabean\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;Demo&quot;</span>， <span class=\"string\">&quot;123456&quot;</span>， <span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;红楼梦&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map、list\">Map、List<a title=\"#map、list\" href=\"#map、list\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t4&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    list.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    list.add(<span class=\"number\">3.0f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ints = &#123;<span class=\"number\">1</span>， <span class=\"number\">2</span>， <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 无序：HashMap、Hashtable</span></span><br><span class=\"line\">    <span class=\"comment\">// 有序：TreeMap(按key 升序)、LinkedHashMap(插入顺序)</span></span><br><span class=\"line\">    Map&lt;String， Object&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;username&quot;</span>， <span class=\"string\">&quot;汤姆&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;password&quot;</span>， <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;book&quot;</span>， <span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;水浒传&quot;</span>));</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;null&quot;</span>， <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;collections&quot;</span>， Collections.emptyList());</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;Array&quot;</span>， ints);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;List&quot;</span>，list);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Expected Output：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;username&quot; : &quot;汤姆&quot;，</span><br><span class=\"line\">  &quot;password&quot; : &quot;123456&quot;，</span><br><span class=\"line\">  &quot;book&quot; : &#123;&quot;name&quot; : &quot;水浒传&quot;&#125;，</span><br><span class=\"line\">  &quot;null&quot; : null，</span><br><span class=\"line\">  &quot;collections&quot; : [ ]，</span><br><span class=\"line\">  &quot;Array&quot; : [ 1， 2， 3 ]，</span><br><span class=\"line\">  &quot;List&quot; : [ &quot;1&quot;， 2， 3.0 ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"null值-和-时间格式-的处理\">Null值 和 时间格式 的处理<a title=\"#null值-和-时间格式-的处理\" href=\"#null值-和-时间格式-的处理\"></a></h3>\n<h4 id=\"未处理的响应\">未处理的响应<a title=\"#未处理的响应\" href=\"#未处理的响应\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t3&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有值的字段默认会返回Null</span></span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setUsername(<span class=\"string\">&quot;威廉&quot;</span>);</span><br><span class=\"line\">    user.setBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;三国演义&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码的User 对象，缺省 password 属性。</p>\n<p>如果不经过处理，返回给前端的将是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;username&quot; : &quot;威廉&quot;，</span><br><span class=\"line\">  &quot;password&quot; : null，</span><br><span class=\"line\">  &quot;book&quot; : &#123;</span><br><span class=\"line\">    &quot;name&quot; : &quot;三国演义&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/t6&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test6</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    Map&lt;String， Object&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;date&quot;</span>，date);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码返回一个Date 对象，但默认为时间戳：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;date&quot; : 1614239835279</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"处理方案\">处理方案<a title=\"#处理方案\" href=\"#处理方案\"></a></h4>\n<p>Spring 默认使用jackson 将原响应转换为Json 响应，其中是通过消息转换器实现的。</p>\n<p>即 <code>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</code>。</p>\n<p>可以通过覆写<code>MappingJackson2HttpMessageConverter</code>中的<code>ObjectMapper</code>，来改变其中某些默认配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;objectMapper&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--全局忽略null 字段，适用嵌套--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;serializationInclusion&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;NON_NULL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--全局转换时间格式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dateFormat&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.text.SimpleDateFormat&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置String 的消息转换器，将默认编码ISO_8859_1 修改为UTF-8--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultCharset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置Jackson 消息转换器--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--覆写Jackson 消息转换器中的objectMapper--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;objectMapper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;objectMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--格式化打印--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prettyPrint&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（以上：格式化json 输出、处理默认中文乱码、处理时间格式、全局忽略null 字段）</p>\n<h2 id=\"ssm整合\">SSM整合<a title=\"#ssm整合\" href=\"#ssm整合\"></a></h2>\n<p>自己搭了个简单的SSM脚手架方便以后复用，整合过程代码就不贴了，大部分都很简单。</p>\n<p>踩了一个坑搞了挺长时间记录一下：</p>\n<p><code>application-context</code>可以分为多个文件，service、dao、mvc等，最后<code>import</code>导入到<code>主 application-context.xml</code>。</p>\n<img src=\"C:\\Users\\CYX\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210304232531750.png\" alt=\"image-20210304232531750\" style=\"zoom: 80%;\" />\n<p><code>web.xml</code> 一定要配置为<code>主application-context</code>，不能为 mvc 那个文件，不然问题多多：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/application-context.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文件上传下载\">文件上传下载<a title=\"#文件上传下载\" href=\"#文件上传下载\"></a></h2>\n<p>​\t文件上传是项目开发中最常见的功能之一 SspringMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置<code>MultipartResolver</code>。</p>\n<p>​\t前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为<code>multipart/form-data</code>。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器。</p>\n<p>1.导入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文件上传--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.配置 multipartResolver</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文件上传配置，id必须为：multipartResolver，否则上传文件会报400--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;multipartResolver&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultEncoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxUploadSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10485760&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxInMemorySize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;40960&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CommonsMultipartFile 的 常用方法：</p>\n<ul>\n<li>String getOriginalFilename()：获取上传文件的原名</li>\n<li>InputStream getInputStream()：获取文件流</li>\n<li>void transferTo(File dest)：将上传文件保存到一个目录文件中</li>\n</ul>\n<p>3.前端表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/upload&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file， HttpServletRequest request)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 批量上传CommonsMultipartFile则为数组即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文件名 : file.getOriginalFilename();</span></span><br><span class=\"line\">    String uploadFileName = file.getOriginalFilename();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果文件名为空，直接回到首页！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;&quot;</span>.equals(uploadFileName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;上传文件名 : &quot;</span> + uploadFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 上传路径保存设置</span></span><br><span class=\"line\">    String path = request.getServletContext().getRealPath(<span class=\"string\">&quot;/upload&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果路径不存在，创建一个</span></span><br><span class=\"line\">    File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">        realPath.mkdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;上传文件保存地址：&quot;</span> + realPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 文件输入流、输出流</span></span><br><span class=\"line\">    InputStream is = file.getInputStream();</span><br><span class=\"line\">    OutputStream os = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(realPath， uploadFileName));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取写出</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        os.write(buffer， <span class=\"number\">0</span>， len);</span><br><span class=\"line\">        os.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    os.close();</span><br><span class=\"line\">    is.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没问题的话，就OK了：</p>\n<img src=\"C:\\Users\\CYX\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210305092748205.png\" alt=\"image-20210305092748205\" style=\"zoom:80%;\" />\n<p>也可以 使用 <code>file.Transto</code> 来保存上传的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload2</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file， HttpServletRequest request)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//上传路径保存设置</span></span><br><span class=\"line\">    String path = request.getServletContext().getRealPath(<span class=\"string\">&quot;/upload&quot;</span>);</span><br><span class=\"line\">    File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">        realPath.mkdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上传文件地址</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;上传文件保存地址：&quot;</span> + realPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class=\"line\">    file.transferTo(<span class=\"keyword\">new</span> File(realPath + <span class=\"string\">&quot;/&quot;</span> + file.getOriginalFilename()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/download&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">downloads</span><span class=\"params\">(HttpServletResponse response， HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要下载的图片地址</span></span><br><span class=\"line\">        String path = request.getServletContext().getRealPath(<span class=\"string\">&quot;/upload&quot;</span>);</span><br><span class=\"line\">        String fileName = <span class=\"string\">&quot;图片1.png&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1、设置response 响应头</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置页面不缓存，清空buffer</span></span><br><span class=\"line\">        response.reset();</span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>); <span class=\"comment\">//字符编码</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;multipart/form-data&quot;</span>); <span class=\"comment\">//二进制传输数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置响应头</span></span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>， <span class=\"string\">&quot;attachment;fileName=&quot;</span> + URLEncoder.encode(fileName， <span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(path， fileName);</span><br><span class=\"line\">        <span class=\"comment\">// 2、 读取文件--输入流</span></span><br><span class=\"line\">        InputStream input = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        <span class=\"comment\">// 3、 写出文件--输出流</span></span><br><span class=\"line\">        OutputStream out = response.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buff = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 4、执行 写出操作</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((index = input.read(buff)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            out.write(buff， <span class=\"number\">0</span>， index);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">        input.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理器\">异常处理器<a title=\"#异常处理器\" href=\"#异常处理器\"></a></h2>\n<h3 id=\"处理思路\">处理思路<a title=\"#处理思路\" href=\"#处理思路\"></a></h3>\n<p>在Spring MVC 中异常处理的思路：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/885859/201911/885859-20191108160459586-1201492581.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>系统中异常分为两类：</p>\n<ul>\n<li>预期异常</li>\n<li>运行时异常 RuntimeException</li>\n</ul>\n<p>前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p>\n<p>系统的dao、service、controller出现都可以通过throws Exception<strong>向上抛出</strong>，最后由springmvc 前端控制器交由<strong>异常处理器</strong>进行异常处理。</p>\n<h3 id=\"处理方式\">处理方式<a title=\"#处理方式\" href=\"#处理方式\"></a></h3>\n<p>在Spring MVC中处理异常有 4种方式：</p>\n<p>（1）使用Spring MVC提供的简单异常处理器 <code>SimpleMappingExceptionResolver</code>；</p>\n<p>（2）实现Spring的异常处理接口 <code>HandlerExceptionResolver</code> 自定义自己的异常处理器；</p>\n<p>（3）使用 <code>@ExceptionHandler</code> 注解实现异常处理；</p>\n<p>（4）使用 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code></p>\n<p>这里使用 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 处理，使API 发生异常时返回包含错误信息和原因的Json ：</p>\n<p><code>@ControllerAdvice</code>，是Spring3.2提供的新注解，它是一个Controller 增强版，可对controller中被 @RequestMapping注解的方法加一些逻辑处理。最常用的就是异常处理。</p>\n<p><code>@ExceptionHandler</code>，ExceptionHandler</p>\n<p>先自定义一个异常类，继承 Exception：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chenyuxi.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再自定义一个异常处理器，实现<code>HandlerExceptionResolver</code> 接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chenyuxi.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chenyuxi.exception.CustomException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomHandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(CustomException.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String， Object&gt; resolveException(CustomException e) &#123;</span><br><span class=\"line\">        Map&lt;String， Object&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>， <span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>， <span class=\"string\">&quot;操作失败，原因：&quot;</span> + e.message + <span class=\"string\">&quot;，异常：&quot;</span> + e.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后在springmvc.xml 配置一下全局异常处理器：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 全局异常处理器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.chenyuxi.controller.CustomHandlerExceptionResolver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h3>\n<p>在controller、service、dao中任意一处手动抛出异常。</p>\n<p>如果是程序中手动抛出的异常，可以在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试异常处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/ex1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String，Object&gt; testException1() <span class=\"keyword\">throws</span> CustomException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String， Object&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;username&quot;</span>， <span class=\"string\">&quot;汤姆&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;password&quot;</span>， <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CustomException(<span class=\"string\">&quot;发生了一个小错误!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果与业务功能相关的异常，建议在service中抛出。</li>\n<li>与业务功能没有关系的异常，建议在controller中抛出。</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/myseries/p/11820777.html\" target=\"_blank\">参考链接1</a></p>\n<p><a href=\"https://www.cnblogs.com/shanheyongmu/p/5872442.html\" target=\"_blank\">参考链接2</a></p>\n<h2 id=\"拦截器\">拦截器<a title=\"#拦截器\" href=\"#拦截器\"></a></h2>\n<blockquote>\n<p>Spring MVC中的拦截器(<code>Interceptor</code>)类似于Servlet中的过滤器(<code>Filter</code>)，主要用于拦截用户请求并做相应的处理，例如通过拦截器可以进行权限验证，记录请求信息的日志，判断用户是否登录等</p>\n</blockquote>\n<p>**过滤器与拦截器的区别：**拦截器是AOP思想的具体应用。</p>\n<p><strong>过滤器</strong></p>\n<ul>\n<li>servlet规范中的一部分，任何java web工程都可以使用</li>\n<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>\n</ul>\n<p><strong>拦截器</strong></p>\n<ul>\n<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>\n<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js等静态资源是不会进行拦截的</li>\n</ul>\n<p>要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置，通常拦截器类可以通过两种方式来定义，如下所示：</p>\n<ol>\n<li>实现<code>HandlerInterceptor</code>接口，或继承<code>HandlerInterceptor</code>接口的实现类，如<code>HandlerInterceptorAdapter</code>。</li>\n<li>实现<code>WebRequestInterceptor</code>接口，或继承<code>WebRequestInterceptor</code>接口的实现类。</li>\n</ol>\n<hr>\n<p>实现<code>HandlerInterceptor</code>接口例子：</p>\n<p>1、编写一个自定义拦截器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在请求处理的方法之前执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果返回true执行下一个拦截器</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果返回false就不执行下一个拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------处理前------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在请求处理方法执行之后执行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------处理后------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------清理------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、在spring mvc的配置文件中配置拦截器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--拦截器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--/admin/* 拦截的是/admin/add 这种子路径, /admin/add/user 不会被拦截--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--/admin/** 拦截的是/admin/ 及其所有后代路径--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.chenyuxi.interceptor.CustomInterceptor&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3、用于测试的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试拦截器的Controller</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorTestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/interceptor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">interceptorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;interceptorTest Ran..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问<code>/interceptor</code>后，控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------处理前------------</span><br><span class=\"line\">interceptorTest Ran..</span><br><span class=\"line\">------------处理后------------</span><br><span class=\"line\">------------清理------------</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/GoogTech/YUbuntu0109.github.io/blob/HexoBackup/source/_posts/Spring-MVC%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8.md\" target=\"_blank\">参考链接1</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247484026&amp;idx=1&amp;sn=eba24b51963e8c3293d023cbcf3318dc&amp;scene=19#wechat_redirect\" target=\"_blank\">参考链接2</a></p>\n<h2 id=\"jsr-303数据校验\">JSR-303数据校验<a title=\"#jsr-303数据校验\" href=\"#jsr-303数据校验\"></a></h2>\n<p><a href=\"https://blueblue233.github.io/blog/9d26e814/\" target=\"_blank\">参考链接1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/141998917\" target=\"_blank\">参考链接2</a></p>\n<p><a href=\"https://github.com/brianway/springmvc-mybatis-learning/blob/master/springmvc/springmvc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(14)-springmvc%E6%A0%A1%E9%AA%8C.md\" target=\"_blank\">参考链接3</a></p>\n","plink":"https://www.tzcat8.cn/SpringMVC/","toc":[{"id":"spring-mvc","title":"Spring MVC","index":"1","children":[{"id":"入门","title":"入门","index":"1.1","children":[{"id":"概述","title":"概述","index":"1.1.1"},{"id":"dispatcherservlet","title":"DispatcherServlet","index":"1.1.2"},{"id":"工作流程","title":"工作流程","index":"1.1.3"}]},{"id":"hello-world","title":"Hello World","index":"1.2","children":[{"id":"普通servlet版","title":"普通Servlet版","index":"1.2.1"},{"id":"配置版","title":"配置版","index":"1.2.2"},{"id":"注解版","title":"注解版","index":"1.2.3"}]},{"id":"controller","title":"Controller","index":"1.3","children":[{"id":"实现接口方式","title":"实现接口方式","index":"1.3.1"},{"id":"注解方式","title":"注解方式","index":"1.3.2"}]},{"id":"requestmapping","title":"RequestMapping","index":"1.4","children":[{"id":"注解位置","title":"注解位置","index":"1.4.1"},{"id":"注解属性","title":"注解属性","index":"1.4.2"}]},{"id":"restful","title":"RESTful","index":"1.5","children":[{"id":"概念","title":"概念","index":"1.5.1"},{"id":"最佳实践","title":"最佳实践","index":"1.5.2","children":[{"id":"一、url-设计","title":"一、URL 设计","index":"1.5.2.1"},{"id":"二、状态码","title":"二、状态码","index":"1.5.2.2"},{"id":"三、服务器回应","title":"三、服务器回应","index":"1.5.2.3"}]},{"id":"api文档、测试工具","title":"API文档、测试工具","index":"1.5.3","children":[{"id":"swagger","title":"Swagger","index":"1.5.3.1"},{"id":"eolinker","title":"Eolinker","index":"1.5.3.2"}]},{"id":"参考","title":"参考","index":"1.5.4"}]},{"id":"controller-视图跳转","title":"Controller 视图跳转","index":"1.6","children":[{"id":"modelandview","title":"ModelAndView","index":"1.6.1"},{"id":"servlet","title":"Servlet","index":"1.6.2"},{"id":"springmvc","title":"SpringMVC","index":"1.6.3"}]},{"id":"controller-参数绑定","title":"Controller 参数绑定","index":"1.7","children":[{"id":"属性名","title":"属性名","index":"1.7.1"},{"id":"bean-对象","title":"Bean 对象","index":"1.7.2"},{"id":"httpservletrequest","title":"HttpServletRequest","index":"1.7.3"},{"id":"@pathvariable","title":"@PathVariable","index":"1.7.4"},{"id":"@requestparam","title":"@RequestParam","index":"1.7.5"}]},{"id":"返回-string-乱码","title":"返回 String 乱码","index":"1.8"},{"id":"返回-json","title":"返回 JSON","index":"1.9","children":[{"id":"1.使用jackson-返回-json-字符串","title":"1.使用Jackson 返回 Json 字符串","index":"1.9.1"},{"id":"2.使用httpservlet-直接输出","title":"2.使用HttpServlet 直接输出","index":"1.9.2"},{"id":"3.直接返回object","title":"3.直接返回Object","index":"1.9.3","children":[{"id":"javabean","title":"JavaBean","index":"1.9.3.1"},{"id":"map、list","title":"Map、List","index":"1.9.3.2"}]},{"id":"null值-和-时间格式-的处理","title":"Null值 和 时间格式 的处理","index":"1.9.4","children":[{"id":"未处理的响应","title":"未处理的响应","index":"1.9.4.1"},{"id":"处理方案","title":"处理方案","index":"1.9.4.2"}]}]},{"id":"ssm整合","title":"SSM整合","index":"1.10"},{"id":"文件上传下载","title":"文件上传下载","index":"1.11"},{"id":"异常处理器","title":"异常处理器","index":"1.12","children":[{"id":"处理思路","title":"处理思路","index":"1.12.1"},{"id":"处理方式","title":"处理方式","index":"1.12.2"},{"id":"测试","title":"测试","index":"1.12.3"}]},{"id":"拦截器","title":"拦截器","index":"1.13"},{"id":"jsr-303数据校验","title":"JSR-303数据校验","index":"1.14"}]}],"copyright":{"author":"tzcat8","link":"<a href=\"https://www.tzcat8.cn/SpringMVC/\" title=\"SpringMVC\">https://www.tzcat8.cn/SpringMVC/</a>","license":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a> 许可协议。欢迎转载，但请注明出处！🤗"}}