{"title":"Spring Boot","date":"2022-01-01T01:01:01.000Z","date_formatted":{"ll":"2022年1月1日","L":"2022/01/01","MM-DD":"01-01"},"link":"spring-boot","tags":["java","spring boot"],"updated":"2021-10-17T16:28:31.947Z","content":"<h1 id=\"资料\">资料<a title=\"#资料\" href=\"#资料\"></a></h1>\n<h2 id=\"文档\">文档<a title=\"#文档\" href=\"#文档\"></a></h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/\" target=\"_blank\">Spring Boot 参考文档</a></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html\" target=\"_blank\">Getting Started（入门）</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html\" target=\"_blank\">Developing with Spring Boot（使用 Spring Boot 开发）</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\" target=\"_blank\">Spring Boot 特性</a></li>\n</ul>\n<h2 id=\"源码\">源码<a title=\"#源码\" href=\"#源码\"></a></h2>\n<p><a href=\"https://github.com/spring-projects/spring-boot/tree/v2.5.4\" target=\"_blank\">spring-projects/spring-boot at v2.5.4</a></p>\n<h2 id=\"spring-boot-plus\">Spring Boot Plus<a title=\"#spring-boot-plus\" href=\"#spring-boot-plus\"></a></h2>\n<p>发现一个好玩的，没来得及研究：<a href=\"https://springboot.plus/\" target=\"_blank\">spring-boot-plus</a></p>\n<p><strong>主要特性</strong></p>\n<ul>\n<li>集成spring boot 常用开发组件集、公共配置、AOP日志等</li>\n<li>Maven多模块架构</li>\n<li>集成mybatis plus快速dao操作</li>\n<li>快速生成后台代码: entity/param/vo/controller/service/mapper/xml</li>\n<li>集成Swagger/Knife4j，可自动生成api文档</li>\n<li>集成jwt、shiro权限控制</li>\n<li>集成Redis缓存</li>\n<li>集成HikariCP连接池，JDBC性能和慢查询检测</li>\n<li>集成spring boot admin，实时检测项目运行情况</li>\n<li>使用assembly maven插件进行不同环境打包部署,包含启动、重启命令，配置文件提取到外部config目录</li>\n</ul>\n<h2 id=\"启动流程\">启动流程<a title=\"#启动流程\" href=\"#启动流程\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/SpringBoot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png\" alt=\"SpringBoot启动流程\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"概述\">概述<a title=\"#概述\" href=\"#概述\"></a></h1>\n<h2 id=\"什么是-spring-boot？\">什么是 Spring Boot？<a title=\"#什么是-spring-boot？\" href=\"#什么是-spring-boot？\"></a></h2>\n<p>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用<br>\nSpring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。</p>\n<h2 id=\"spring-boot-有哪些优点？\">Spring Boot 有哪些优点？<a title=\"#spring-boot-有哪些优点？\" href=\"#spring-boot-有哪些优点？\"></a></h2>\n<p>Spring Boot 主要有如下优点：</p>\n<ol>\n<li>容易上手，提升开发效率，为 Spring 开发提供一个更快、更广泛的入门体验。</li>\n<li>开箱即用，远离繁琐的配置。</li>\n<li>提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行<br>\n状况检查和外部化配置等。</li>\n<li>没有代码生成，也不需要XML配置。</li>\n<li>避免大量的 Maven 导入和各种版本冲突。</li>\n</ol>\n<h2 id=\"时代背景\">时代背景<a title=\"#时代背景\" href=\"#时代背景\"></a></h2>\n<h3 id=\"微服务\">微服务<a title=\"#微服务\" href=\"#微服务\"></a></h3>\n<p>James Lewis and Martin Fowler (2014) 提出微服务完整概念：<a href=\"https://martinfowler.com/microservices/\" target=\"_blank\">Microservices Guide</a>。译文：<a href=\"http://blog.cuicc.com/blog/2015/07/22/microservices/\" target=\"_blank\">微服务｜YYGCui’s blog</a></p>\n<ul>\n<li>\n<p>微服务是一种架构风格</p>\n</li>\n<li>\n<p>一个应用拆分为一组小型服务</p>\n</li>\n<li>\n<p>每个服务运行在自己的进程内，也就是可独立部署和升级</p>\n</li>\n<li>\n<p>服务之间使用轻量级HTTP交互</p>\n</li>\n<li>\n<p>服务围绕业务功能拆分</p>\n</li>\n<li>\n<p>可以由全自动部署机制独立部署</p>\n</li>\n<li>\n<p>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术。</p>\n</li>\n</ul>\n<h3 id=\"分布式\">分布式<a title=\"#分布式\" href=\"#分布式\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/1599562347965-a617a866-4270-44e9-9c5b-ced552683eda.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>分布式带来了新的困难：</p>\n<ul>\n<li>\n<p>远程调用</p>\n</li>\n<li>\n<p>服务发现</p>\n</li>\n<li>\n<p>负载均衡</p>\n</li>\n<li>\n<p>服务容错</p>\n</li>\n<li>\n<p>配置管理</p>\n</li>\n<li>\n<p>服务监控</p>\n</li>\n<li>\n<p>链路追踪</p>\n</li>\n<li>\n<p>日志管理</p>\n</li>\n<li>\n<p>任务调度</p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<blockquote>\n<p>发现宝藏😍：<a href=\"https://icyfenix.cn/\" target=\"_blank\">凤凰架构：构筑可靠的大型分布式系统 | 凤凰架构</a></p>\n</blockquote>\n<h3 id=\"云原生\">云原生<a title=\"#云原生\" href=\"#云原生\"></a></h3>\n<p>上云的困难：</p>\n<ul>\n<li>\n<p>服务自愈</p>\n</li>\n<li>\n<p>弹性伸缩</p>\n</li>\n<li>\n<p>服务隔离</p>\n</li>\n<li>\n<p>自动化部署</p>\n</li>\n<li>\n<p>灰度发布</p>\n</li>\n<li>\n<p>流量治理</p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/1599563498261-8b0b4d86-bd9b-49a3-aefc-89696a375dcb.png\" alt=\"img\" style=\"zoom: 67%;\" />\n<h1 id=\"入门\">入门<a title=\"#入门\" href=\"#入门\"></a></h1>\n<h2 id=\"hello-world\">Hello World<a title=\"#hello-world\" href=\"#hello-world\"></a></h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository(从存储库中查找父项) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// com/example/springboot/SpringbootReviewApplication.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootReviewApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootReviewApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// com/example/springboot/controller/HelloController.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot; Hello Spring Boot ! &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动引导类：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906111650861.png\" alt=\"image-20210906111650861\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906111700303.png\" alt=\"image-20210906111700303\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"起步依赖\">起步依赖<a title=\"#起步依赖\" href=\"#起步依赖\"></a></h2>\n<p>SpringBoot 项目父工程的父工程<code>spring-boot-dependencies-2.5.4.pom</code> 定义了常用依赖及版本，并避免了冲突：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906200755023.png\" alt=\"image-20210906200755023\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"配置\">配置<a title=\"#配置\" href=\"#配置\"></a></h1>\n<h2 id=\"配置文件分类\">配置文件分类<a title=\"#配置文件分类\" href=\"#配置文件分类\"></a></h2>\n<p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用<code>application.properties</code> 或者<code>application.yml (或 application.yaml)</code> 进行配置。</p>\n<p>优先级：properties &gt; yml &gt; yaml</p>\n<h2 id=\"yaml-基本语法\">yaml 基本语法<a title=\"#yaml-基本语法\" href=\"#yaml-基本语法\"></a></h2>\n<p>参考：<a href=\"https://www.runoob.com/w3cnote/yaml-intro.html\" target=\"_blank\">YAML 入门教程 | 菜鸟教程</a></p>\n<h2 id=\"读取配置文件\">读取配置文件<a title=\"#读取配置文件\" href=\"#读取配置文件\"></a></h2>\n<ol>\n<li>\n<p><code>@Value</code><br>\n单个属性注入，数量少比较方便</p>\n</li>\n<li>\n<p><code>Environment</code></p>\n<p>注入获取此对象，通过此对象的方法来获取值</p>\n</li>\n<li>\n<p><code>@ConfigurationProperties</code><br>\n可以将配置文件直接映射成一个实体类</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cyx:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">chenyuxi</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">19</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">beijing</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">shanghai</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">changsha</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">guangzhou</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hangzhou</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 纯量</span></span><br><span class=\"line\"><span class=\"attr\">msg1:</span> <span class=\"string\">&#x27;hello \\n world&#x27;</span> <span class=\"comment\">#不会识别转义字符</span></span><br><span class=\"line\"><span class=\"attr\">msg2:</span> <span class=\"string\">&quot;hello \\n world&quot;</span> <span class=\"comment\">#会识别转义字符</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Cyx.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;cyx&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cyx</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] address;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cyx.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cyx.age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;cyx.address[0]&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;msg1&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg1;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;msg2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Cyx cyx;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloController</span><span class=\"params\">(Environment environment, Cyx cyx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cyx = cyx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;age = &quot;</span> + age);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;address = &quot;</span> + address);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;msg1 = &quot;</span> + msg1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;msg2 = &quot;</span> + msg2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(environment.getProperty(<span class=\"string\">&quot;cyx.name&quot;</span>));</span><br><span class=\"line\">        System.out.println(environment.getProperty(<span class=\"string\">&quot;cyx.address[0]&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;cyx = &quot;</span> + cyx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>output：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = chenyuxi</span><br><span class=\"line\">age = 19</span><br><span class=\"line\">address = beijing</span><br><span class=\"line\">msg1 = hello <span class=\"keyword\">\\n</span> world</span><br><span class=\"line\">msg2 = hello </span><br><span class=\"line\"> world</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">chenyuxi</span><br><span class=\"line\">beijing</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">cyx = Cyx(name=chenyuxi, age=19, address=[beijing, shanghai, changsha, guangzhou, hangzhou])</span><br></pre></td></tr></table></figure>\n<p>在上面例子中，使用了<code>@ConfigurationProperties</code>注解，可以使配置自动映射成实体类。</p>\n<p>有几个注意点：</p>\n<ol>\n<li>\n<p>引入配置处理器依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>实体类需要加上注解：<code>@Component</code></p>\n</li>\n<li>\n<p><code>@ConfigurationProperties(prefix = &quot;cyx&quot;)</code> 可以指定前缀，如果配置有前缀必须指定。</p>\n</li>\n</ol>\n<h2 id=\"profile-（动态切换配置）\">profile （动态切换配置）<a title=\"#profile-（动态切换配置）\" href=\"#profile-（动态切换配置）\"></a></h2>\n<p>我们在开发Spring Boot应用时，通常同一套程序会被安装到不同环境，比如：开发、测试、生产等。其中数据库地址、服务器端口等等配置都不同，如果每次打包时，都要修改配置文件，那么非常麻烦。profile 功能就是来进行动态配置切换的。</p>\n<h3 id=\"profile-配置方式\">profile 配置方式<a title=\"#profile-配置方式\" href=\"#profile-配置方式\"></a></h3>\n<h4 id=\"多profile文件方式\">多profile文件方式<a title=\"#多profile文件方式\" href=\"#多profile文件方式\"></a></h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906212529147.png\" alt=\"image-20210906212529147\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"yml-多文档方式\">yml 多文档方式<a title=\"#yml-多文档方式\" href=\"#yml-多文档方式\"></a></h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906213216404.png\" alt=\"image-20210906213216404\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"profile-激活方式\">profile 激活方式<a title=\"#profile-激活方式\" href=\"#profile-激活方式\"></a></h3>\n<h4 id=\"配置文件\">配置文件<a title=\"#配置文件\" href=\"#配置文件\"></a></h4>\n<p>如上。</p>\n<h4 id=\"虚拟机参数\">虚拟机参数<a title=\"#虚拟机参数\" href=\"#虚拟机参数\"></a></h4>\n<p><code>-Dspring.profiles.active=test</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906213734813.png\" alt=\"image-20210906213734813\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"命令行参数\">命令行参数<a title=\"#命令行参数\" href=\"#命令行参数\"></a></h4>\n<p><code>--spring.profiles.active=pro</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210906214109955.png\" alt=\"image-20210906214109955\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"内部配置加载顺序\">内部配置加载顺序<a title=\"#内部配置加载顺序\" href=\"#内部配置加载顺序\"></a></h2>\n<p>Springboot程序启动时，会从以下位置加载配置文件：</p>\n<ol>\n<li><code>file:/config/</code>:当前项目下的/config目录下</li>\n<li><code>file:/</code>:当前项目的根目录</li>\n<li><code>classpath:/config/</code>：classpath的/config 目录</li>\n<li><code>classpath:/</code>：classpath的根目录</li>\n</ol>\n<p>加载顺序为上文的排列顺序，高优先级配置的属性会生效</p>\n<h2 id=\"外部配置加载顺序\">外部配置加载顺序<a title=\"#外部配置加载顺序\" href=\"#外部配置加载顺序\"></a></h2>\n<p>Spring Boot 允许你从外部加载配置，这样的话，就可以在不同的环境中使用相同的代码。支持的外部配置源包括：Java属性文件、YAML文件、环境变量、命令行参数。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/cjsblog/p/13986846.html\" target=\"_blank\">Spring Boot 加载外部配置文件 - 废物大师兄 - 博客园</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config\" target=\"_blank\">2.外部配置 - Spring Boot 特性</a></li>\n</ul>\n<h1 id=\"容器功能注解\">容器功能注解<a title=\"#容器功能注解\" href=\"#容器功能注解\"></a></h1>\n<h2 id=\"组件添加\">组件添加<a title=\"#组件添加\" href=\"#组件添加\"></a></h2>\n<h3 id=\"@configuration、@bean、@componentscan\">@Configuration、@Bean、@ComponentScan<a title=\"#@configuration、@bean、@componentscan\" href=\"#@configuration、@bean、@componentscan\"></a></h3>\n<p>@Configuration 标注在类上，相当于把该类作为 spring 的 xml 配置文件中的 <code>&lt;beans&gt;</code>，作用为：配置 spring 容器 (应用上下文)。配置类本身也是组件。</p>\n<p><code>@Configuration(proxyBeanMethods = &#123;boolean&#125;)</code>：</p>\n<ul>\n<li>\n<pre><code> Full(proxyBeanMethods = true) 【保证每个@Bean 方法被调用多少次返回的组件都是单实例的】\n</code></pre>\n</li>\n<li>\n<pre><code> Lite(proxyBeanMethods = false)【每个@Bean 方法被调用多少次返回的组件都是新创建的】\n</code></pre>\n</li>\n<li>\n<pre><code> 组件依赖必须使用Full模式【默认】。\n</code></pre>\n</li>\n</ul>\n<p>配置类里面使用 <code>@Bean</code> 标注在方法上给容器注册组件，以方法名作为组件的id，默认是单实例的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">user01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User zhangsan = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@ComponentScan</code> 相当于 <code>&lt;context:component-scan&gt;</code>。</p>\n<p>可以指定 basePackageClasses() 或 basePackages()（或其别名 value()）来定义要扫描的特定包。如果没有定义特定的包，将从声明该注解的类的包开始扫描。</p>\n<h3 id=\"@component、@controller、@service、@repository\">@Component、@Controller、@Service、@Repository<a title=\"#@component、@controller、@service、@repository\" href=\"#@component、@controller、@service、@repository\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>注解</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Component</td>\n<td>最普通的组件，可以被注入到 spring 容器进行管理</td>\n</tr>\n<tr>\n<td>@Repository</td>\n<td>作用于持久层</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>作用于业务逻辑层</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>作用于表现层（spring-mvc 的注解）</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"@import\">@Import<a title=\"#@import\" href=\"#@import\"></a></h3>\n<p>使用@Import导入的类会被Spring加载到IOC容器中，默认组件的名字就是全类名。</p>\n<p>@Import提供4种用法：<br>\n① 导入Bean<br>\n② 导入配置类<br>\n③ 导入 ImportSelector 实现类。一般用于加载配置文件中的类<br>\n④ 导入 ImportBeanDefinitionRegistrar 实现类。</p>\n<h3 id=\"@condition\">@Condition<a title=\"#@condition\" href=\"#@condition\"></a></h3>\n<blockquote>\n<p>思考：SpringBoot是如何知道要创建哪个Bean的？</p>\n<p>为什么导入了<code>spring-boot-starter-data-redis</code>包，SpringBoot就自动创建了Redis 相关的Bean（如<code>RedisTemplate</code>）呢？</p>\n</blockquote>\n<p>@Condition 是在 Spring4.0 增加的<strong>条件判断功能</strong>，通过这个注解<strong>可以动态地决定是否要创建某个Bean</strong>，在满足指定条件的时候才将某个 bean 加载到应用上下文中。</p>\n<p>更多参考：<a href=\"https://juejin.cn/post/6844903903860015111\" target=\"_blank\">Spring Boot @Condition 注解，组合条件你知道吗 - 掘金</a></p>\n<h2 id=\"原生配置文件引入\">原生配置文件引入<a title=\"#原生配置文件引入\" href=\"#原生配置文件引入\"></a></h2>\n<h3 id=\"@importresource\">@ImportResource<a title=\"#@importresource\" href=\"#@importresource\"></a></h3>\n<p><code>@ImportResource(&quot;classpath:beans.xml&quot;)</code></p>\n<p>通过 locations 属性加载对应的 xml 配置文件，同时需要配合 @Configuration 注解一起使用，定义为配置类。</p>\n<h1 id=\"自动装配\">自动装配<a title=\"#自动装配\" href=\"#自动装配\"></a></h1>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\">淘宝一面：“说一下 Spring Boot 自动装配原理呗？” - JavaGuide - 博客园</a></li>\n</ul>\n<h2 id=\"什么是springboot-自动装配？\">什么是SpringBoot 自动装配？<a title=\"#什么是springboot-自动装配？\" href=\"#什么是springboot-自动装配？\"></a></h2>\n<p>使用Spring 时需要配置很多的XML 。即使 Spring 后面引入了基于注解的配置，在开启某些 Spring 特性或者引入第三方依赖的时候，还是需要用 XML 或 Java 进行显式配置。</p>\n<p>例如使用Spring MVC 写个简单的RESTful 接口，都需要配置一大堆东西，例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class=\"attr\">.....</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.chenyuxi.controller&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;objectMapper&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--全局忽略null 字段,适用嵌套--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;serializationInclusion&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;NON_NULL&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--全局转换时间格式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dateFormat&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.text.SimpleDateFormat&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--配置String 的消息转换器，将默认编码ISO_8859_1 修改为UTF-8--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultCharset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--配置Jackson 消息转换器--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--覆写Jackson 消息转换器中的objectMapper--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;objectMapper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;objectMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--格式化打印--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prettyPrint&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>加上之后配置事务、Mybatis、…等等，就更多了。</p>\n<p>但是在Spring Boot 项目中，只需要添加相关 Starter，无需配置，通过 <code>main</code> 方法运行即可。</p>\n<p>那为什么不用配置了呢？这些配置去哪了呢？</p>\n<p>其实是Spring Boot 帮我们自动按常用习惯（约定）配置好了。并且，我们还能通过 Spring Boot 的全局配置文件 application.properties 或 application.yml 等对项目进行自定义设置，比如更换端口号，配置 JPA 属性等等。</p>\n<p>实际上 Spring Framework 早就实现了这个自动装配。</p>\n<p><strong>Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化：</strong></p>\n<blockquote>\n<p><em>SPI ，全称为 Service Provider Interface(服务提供者接口)，是一种服务发现机制。它通过在classpath路径下的META-INF/services 文件夹查找文件，自动加载文件中所定义的类。</em></p>\n</blockquote>\n<p><strong>SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的 <code>META-INF/spring.factories</code> 文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。</strong></p>\n<p>这就是Spring Boot 自动配置的基本实现原理。</p>\n<h2 id=\"原理分析\">原理分析<a title=\"#原理分析\" href=\"#原理分析\"></a></h2>\n<p><code>@SpringBootApplication</code>挨个分析：</p>\n<ul>\n<li>@SpringBootConfiguration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan</li>\n</ul>\n<h3 id=\"@springbootconfiguration\">@SpringBootConfiguration<a title=\"#@springbootconfiguration\" href=\"#@springbootconfiguration\"></a></h3>\n<p>就是<code>@Configuration</code>。</p>\n<h3 id=\"@componentscan\">@ComponentScan<a title=\"#@componentscan\" href=\"#@componentscan\"></a></h3>\n<p>扫描被 <code>@Component</code> (<code>@Service</code>,<code>@Controller</code>) 注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排除 TypeExcludeFilter 和 AutoConfigurationExcludeFilter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(excludeFilters = &#123; </span></span><br><span class=\"line\"><span class=\"meta\">    @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class=\"line\"><span class=\"meta\">    @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) </span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"@enableautoconfiguration\">@EnableAutoConfiguration<a title=\"#@enableautoconfiguration\" href=\"#@enableautoconfiguration\"></a></h3>\n<p>@EnableAutoConfiguration 也是一个合成注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Environment property that can be used to override when auto-configuration is</span></span><br><span class=\"line\"><span class=\"comment\">    * enabled.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   String ENABLED_OVERRIDE_PROPERTY = <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> the classes to exclude</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class=\"line\"><span class=\"comment\">    * applied.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> the class names to exclude</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此注解由<code>@AutoConfigurationPackage</code>和<code>@Import(AutoConfigurationImportSelector.class)</code>组成。</p>\n<ul>\n<li><code>@AutoConfigurationPackage</code> 的作用是，将main 类路径包下的所有组件注册到容器中。</li>\n<li><code>@Import(AutoConfigurationImportSelector.class)</code> 的作用是，导入<code>AutoConfigurationImportSelector.class</code>（自动配置类导入选择器），进而加载自动装配类 <code>xxxxxxxxxxxAutoconfiguration</code> 。</li>\n</ul>\n<p>自动装配核心功能，实际是通过 <code>AutoConfigurationImportSelector</code> 类实现的。</p>\n<h3 id=\"autoconfigurationimportselector.class\">AutoConfigurationImportSelector.class<a title=\"#autoconfigurationimportselector.class\" href=\"#autoconfigurationimportselector.class\"></a></h3>\n<p>重点就是这个类，被导入到Spring Boot Application IOC 容器中了。</p>\n<p>它到底做了些什么事？使得Spring Boot 能够实现自动配置？</p>\n<p>首先分析下此类的继承体系，IDEA 快捷键（Windows）：<code>Ctrl+Alt+Shift+U</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210913212655728.png\" alt=\"image-20210913212655728\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看出，<code>AutoConfigurationImportSelector</code> 类实现了 <code>ImportSelector</code> 接口，也就实现了这个接口中的 <code>selectImports</code> 方法。</p>\n<h3 id=\"importselector\">ImportSelector<a title=\"#importselector\" href=\"#importselector\"></a></h3>\n<p>该方法主要用于  <strong>获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] NO_IMPORTS = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// &lt;1&gt;.判断自动装配开关是否打开</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 没打开返回空数组</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> NO_IMPORTS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//&lt;2&gt;.开启了自动配置，则获取自动配置Entry</span></span><br><span class=\"line\">   AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getautoconfigurationentry\">getAutoConfigurationEntry<a title=\"#getautoconfigurationentry\" href=\"#getautoconfigurationentry\"></a></h3>\n<p>来到了<code>getAutoConfigurationEntry(annotationMetadata)</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the &#123;<span class=\"doctag\">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class=\"doctag\">@link</span> AnnotationMetadata&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * of the importing &#123;<span class=\"doctag\">@link</span> Configuration <span class=\"doctag\">@Configuration</span>&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the auto-configurations that should be imported</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 根据annotationMetadata 获取attributes </span></span><br><span class=\"line\">   AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">   <span class=\"comment\">// 根据annotationMetadata 和 attributes 获取候选配置类们</span></span><br><span class=\"line\">   List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">   <span class=\"comment\">// 给这些配置类去重</span></span><br><span class=\"line\">   configurations = removeDuplicates(configurations);</span><br><span class=\"line\">   <span class=\"comment\">// 检查并去除排除项</span></span><br><span class=\"line\">   Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">   checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">   configurations.removeAll(exclusions);</span><br><span class=\"line\">   <span class=\"comment\">// 过滤一些什么玩意</span></span><br><span class=\"line\">   configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">   <span class=\"comment\">// 获取所有的 AutoConfigurationImportListener 类型的监听器。并广播 Event 事件。不懂，没事。</span></span><br><span class=\"line\">   fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">   <span class=\"comment\">// 封装成AutoConfigurationEntry 返回</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> (configurations, exclusions);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点是这句：<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code></p>\n<p>获取到了所有候选配置类。后面的代码是进行一系列处理，然后封装返回。</p>\n<p>那就来到<code>getCandidateConfigurations</code>方法。</p>\n<h3 id=\"getcandidateconfigurations\">getCandidateConfigurations<a title=\"#getcandidateconfigurations\" href=\"#getcandidateconfigurations\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the auto-configuration class names that should be considered. By default</span></span><br><span class=\"line\"><span class=\"comment\"> * this method will load candidates using &#123;<span class=\"doctag\">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> metadata the source metadata</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> attributes the &#123;<span class=\"doctag\">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class=\"line\"><span class=\"comment\"> * attributes&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a list of candidate configurations</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">         getBeanClassLoader());</span><br><span class=\"line\">   Assert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class=\"line\">         + <span class=\"string\">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注释写得很清楚了：</p>\n<p><em><code>@return a list of candidate configurations.</code></em></p>\n<p>返回候选配置列表。</p>\n<p><em><code>By default this method will load candidates using &#123;@link SpringFactoriesLoader&#125; with &#123;@link #getSpringFactoriesLoaderFactoryClass()&#125;.</code></em></p>\n<p>默认情况下，此方法将使用 SpringFactoriesLoader 和 getSpringFactoriesLoaderFactoryClass（）加载候选项。</p>\n<p>也就是说Spring Boot 最后会通过Spring 工厂去加载候选配置项。</p>\n<h3 id=\"loadspringfactories\">loadSpringFactories<a title=\"#loadspringfactories\" href=\"#loadspringfactories\"></a></h3>\n<p>再深入就到了<code>loadSpringFactories</code>方法。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914103418582.png\" alt=\"image-20210914103418582\" style=\"zoom:80%;\" />\n<h3 id=\"meta-inf/spring.factories\">META-INF/spring.factories<a title=\"#meta-inf/spring.factories\" href=\"#meta-inf/spring.factories\"></a></h3>\n<p>可以看到它是读取了所有依赖包的<code>META-INF/spring.factories</code>文件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914104417026.png\" alt=\"image-20210914104417026\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>META-INF/spring.factories</code> 文件内容为<code>starter</code> 自定义的配置类，例如<code>mybatis-starter</code> 的：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914105349807.png\" alt=\"image-20210914105349807\" style=\"zoom:80%;\" />\n<p>那么，这两个类就会自动被加载到Spring 容器中：</p>\n<ul>\n<li>org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</li>\n<li>org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</li>\n</ul>\n<p>如此这般，所有依赖包的<code>META-INF/spring.factories</code>文件中的配置类，都会被读取进来。</p>\n<p>回到上层调用方法<code>getCandidateConfigurations</code> 打断点可以查看，一共读取了133个配置类：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914110144438.png\" alt=\"image-20210914110144438\" style=\"zoom:80%;\" />\n<p>但才引入这么几个包：</p>\n<ul>\n<li>org.springframework.boot:spring-boot-starter-web:2.5.4</li>\n<li>org-projectlombok:lombok:1.18.20</li>\n<li>org-springframework.boot:spring-boot-configuration-processor:2.5.4</li>\n<li>org.springframework.boot:spring-boot-starter-test:2.5.4</li>\n<li>org-springframework.boot:spring-boot-starter-data-redis:2.5.4</li>\n<li>mysql:mysql-connector-java:8.0.26(runtime)</li>\n<li>org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0</li>\n</ul>\n<p><strong>咋就133个配置类了呢？这么多配置类，每次启动都要全部加载么？</strong></p>\n<h3 id=\"按需加载-@condition\">按需加载 @Condition<a title=\"#按需加载-@condition\" href=\"#按需加载-@condition\"></a></h3>\n<p>继续单步，到返回语句。可以看到经过过滤后，只剩下了38个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914110422979.png\" alt=\"image-20210914110422979\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这主要是<code>@ConditinalOnXXXXXX</code> （见：上文笔记<a href=\"#@Condition\">@Condition</a>）注解的功劳，它能实现按需加载配置项。</p>\n<p>比如Spring Boot 的Aop 自动配置类，只有在<code>org.aspectj.weaver.Advice</code> 类存在时才生效：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914111315128.png\" alt=\"image-20210914111315128\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Spring Boot 提供的常见条件注解：</p>\n<ul>\n<li><code>@ConditionalOnBean</code>：当容器里有指定 Bean 的条件下</li>\n<li><code>@ConditionalOnMissingBean</code>：当容器里没有指定 Bean 的情况下</li>\n<li><code>@ConditionalOnSingleCandidate</code>：当指定 Bean 在容器中只有一个，或者虽然有多个但是指定首选 Bean</li>\n<li><code>@ConditionalOnClass</code>：当类路径下有指定类的条件下</li>\n<li><code>@ConditionalOnMissingClass</code>：当类路径下没有指定类的条件下</li>\n<li><code>@ConditionalOnProperty</code>：指定的属性是否有指定的值</li>\n<li><code>@ConditionalOnResource</code>：类路径是否有指定的值</li>\n<li><code>@ConditionalOnExpression</code>：基于 SpEL 表达式作为判断条件</li>\n<li><code>@ConditionalOnJava</code>：基于 Java 版本作为判断条件</li>\n<li><code>@ConditionalOnJndi</code>：在 JNDI 存在的条件下差在指定的位置</li>\n<li><code>@ConditionalOnNotWebApplication</code>：当前项目不是 Web 项目的条件下</li>\n<li><code>@ConditionalOnWebApplication</code>：当前项目是 Web 项 目的条件下</li>\n</ul>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p>Spring Boot 通过 @EnableAutoConfiguration 开启自动装配，通过 SpringFactoriesLoader 最终加载 META-INF/spring.factories 中的自动配置类实现自动装配，自动配置其实就是通过 @Conditional 按需加载的配置类。</p>\n<h2 id=\"查看自动装配的所有bean\">查看自动装配的所有bean<a title=\"#查看自动装配的所有bean\" href=\"#查看自动装配的所有bean\"></a></h2>\n<p>如何查看SpringBoot 启动时自动装配了哪些bean ？</p>\n<h3 id=\"方法1\">方法1<a title=\"#方法1\" href=\"#方法1\"></a></h3>\n<p>通过<code>ConfigurableApplicationContext</code> 对象的<code>getBeanDefinitionNames</code>方法可以直接获取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootReviewApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取包含了所有初始化bean 的上下文容器</span></span><br><span class=\"line\">        ConfigurableApplicationContext run = SpringApplication.run(SpringbootReviewApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过容器的API 方法获取容器内所有bean 的名字并打印</span></span><br><span class=\"line\">        String[] beanDefinitionNames = run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印数量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;run.getBeanDefinitionCount() = &quot;</span> + run.getBeanDefinitionCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果包含了我们自定义的Bean 和外部库的Bean ：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210910164720949.png\" alt=\"image-20210910164720949\" loading=\"lazy\" class=\"φbp\"></p>\n<p>简单引入几个依赖，Spring Boot 就给我初始化了两百多个Bean…</p>\n<h3 id=\"方法2\">方法2<a title=\"#方法2\" href=\"#方法2\"></a></h3>\n<p>通过强大的IntelliJ 也可查看。IntelliJ 提供了<code>Endpoint</code>功能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210910165122197.png\" alt=\"image-20210910165122197\" loading=\"lazy\" class=\"φbp\"></p>\n<p>并提供了多种筛选、视图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210910165317369.png\" alt=\"image-20210910165317369\" loading=\"lazy\" class=\"φbp\"></p>\n<p>太强大了，一直在找这功能，原来藏在这里。</p>\n<h3 id=\"方法3\">方法3<a title=\"#方法3\" href=\"#方法3\"></a></h3>\n<p>新发现的，更牛逼。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210915190833802.png\" alt=\"image-20210915190833802\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"自定义starter\">自定义Starter<a title=\"#自定义starter\" href=\"#自定义starter\"></a></h2>\n<p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247486499&amp;idx=2&amp;sn=ce229938f5284e3a43e04e9f84121bd1&amp;chksm=e9c35e43deb4d75571c430f42758930f2e963df4bd692dcbc52beac0c6907f9d172ad533904a&amp;scene=21\" target=\"_blank\">Spring Boot2 系列教程(六)自定义 Spring Boot 中的 starter</a></p>\n<p>所谓的 Starter ，其实就是一个普通的 Maven 项目，因此我们自定义 Starter ，需要首先创建一个普通的 Maven 项目，创建完成后，添加 Starter 的自动化配置类即可，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置完成后，我们首先创建一个 HelloProperties 类，用来接受 application.properties 中注入的值，以供初始Bean 时使用，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chenyuxi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;chenyuxi&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_NAME = <span class=\"string\">&quot;默认Name子&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_MSG = <span class=\"string\">&quot;默认Msg子&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = DEFAULT_NAME;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg = DEFAULT_MSG;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用了<code>@ConfigurationProperties</code>注解，可以加上配置处理器：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>要注入到<code>HelloProperties</code> 里面的值，也就是<strong>自动配置的默认属性</strong>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">chenyuxi:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">皮卡丘</span></span><br><span class=\"line\">  <span class=\"attr\">msg:</span> <span class=\"string\">abc</span></span><br></pre></td></tr></table></figure>\n<p>配置完成 HelloProperties 后，接下来我们来定义一个 HelloService ，然后定义一个简单的 say 方法， HelloService 的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chenyuxi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">&quot; say &quot;</span> + msg + <span class=\"string\">&quot; !&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点来了，写一个自动配置类，将HelloService 自动配置好并搞到容器里面去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表明这是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 使 @ConfigurationProperties 注解的类生效</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"comment\">// 当 HelloService.class 存在时，此配置类才生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HelloService.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器注入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloServiceAutoConfiguration</span><span class=\"params\">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.helloProperties = helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 赋予 HelloService 这个Bean 自动配置的值，并注册到容器中</span></span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        helloService.setName(helloProperties.getName());</span><br><span class=\"line\">        helloService.setMsg(helloProperties.getMsg());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为Spring Boot 的自动配置是通过扫描Starter 的<code>META-INF/spring.factories</code> 文件，所以最后还要搞一个这文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># resources/META-INF/spring.factories</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">com.chenyuxi.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n<p>完成。</p>\n<p>本地安装，maven install。</p>\n<p>项目中引入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>TestCustomStarter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>已向Spring 容器自动注册了HelloService 并设置了默认值，接下来测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMyStarter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testMyStarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloService.sayHello() = &quot;</span> + helloService.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\"></span><br><span class=\"line\">helloService.sayHello() = 陈予希 say 哈哈哈子 !</span><br></pre></td></tr></table></figure>\n<p>也可以在配置文件里，修改Starter 的默认值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">chenyuxi:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">卡布达</span></span><br><span class=\"line\">  <span class=\"attr\">msg:</span> <span class=\"string\">你好呀</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\"></span><br><span class=\"line\">helloService.sayHello() = 卡布达 say 你好呀 !</span><br></pre></td></tr></table></figure>\n<h1 id=\"web开发\">Web开发<a title=\"#web开发\" href=\"#web开发\"></a></h1>\n<h2 id=\"内置web-服务器\">内置Web 服务器<a title=\"#内置web-服务器\" href=\"#内置web-服务器\"></a></h2>\n<p>Spring Boot 内置了多种 Web 服务器，默认使用的是 Tomcat 。</p>\n<p>这个是Spring Boot 嵌入服务器的自动配置类。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210909155444645.png\" alt=\"image-20210909155444645\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在自动配置类上有个<code>@ConditionalOnWebApplication</code>注解，表示在Web 应用程序中生效。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210909155605330.png\" alt=\"image-20210909155605330\" style=\"zoom: 67%;\" />\n<p>同级包下有四个Web 服务器工厂定制器（Version 2.5.4）：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210909155737166.png\" alt=\"image-20210909155737166\" style=\"zoom:67%;\" />\n<p>在 自动配置类里的 对应几个Web服务器的 内部类 上，有个<code>@ConditionalOnClass</code>注解：当指定的类存在时生效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210909160037856.png\" alt=\"image-20210909160037856\" loading=\"lazy\" class=\"φbp\"></p>\n<p>通过依赖传递，<code>spring-boot-starter-web</code>-&gt;<code>spring-boot-starter-tomcat</code>-&gt;<code>tomcat-embed-core</code></p>\n<p>Tomcat 类被引入，<code>@ConditionalOnClass(&#123;Tomcat.class, UpgradeProtocol.class&#125;)</code>生效。</p>\n<p>所以Spring Boot 启动时默认就以Tomcat 为Web 服务器。</p>\n<img src=\"C:\\Users\\CYX\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210909160603551.png\" alt=\"image-20210909160603551\" style=\"zoom: 80%;\" />\n<p>要修改Web 服务器，只需要排除<code>tomcat-starter</code>并引入对应web 服务器的starter即可，例如jetty：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210909172946539.png\" alt=\"image-20210909172946539\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"springmvc-自动配置\">SpringMVC 自动配置<a title=\"#springmvc-自动配置\" href=\"#springmvc-自动配置\"></a></h2>\n<p>官方文档说明：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.auto-configuration\" target=\"_blank\">Spring Boot Features - 7.1.1.Spring MVC Auto-configuration</a></p>\n<p>Spring Boot 简化了 Spring Web MVC 的大部分配置，大多数场景都不需要自定义配置。</p>\n<ul>\n<li>\n<p>ContentNegotiatingViewResolver、BeanNameViewResolver： 视图解析器的支持</p>\n</li>\n<li>\n<p>支持提供静态资源（包括 webjars）</p>\n</li>\n<li>\n<p>自动注册 Converter，GenericConverter，Formatter</p>\n</li>\n<li>\n<p>对 HttpMessageConverters 的支持</p>\n</li>\n<li>\n<p>自动注册 MessageCodesResolver</p>\n</li>\n<li>\n<p>index.html 支持</p>\n</li>\n<li>\n<p>自动使用一个 ConfigurableWebBindingInitializer： 可配置Web绑定初始化器</p>\n</li>\n<li>\n<p>…</p>\n</li>\n<li>\n<p>如果想保留 Spring Boot 的自动配置，并进行更多自定义（拦截器、格式化程序、视图控制器和其他功能），可以添加自己的 <code>WebMvcConfigurer</code> 类型的 <code>@Configuration</code> 类，<strong>但不要添加 <code>@EnableWebMvc</code></strong>。</p>\n</li>\n<li>\n<p>声明一个类型为 WebMvcRegistrations 的 bean 可以改变默认底层组件。</p>\n</li>\n<li>\n<p>使用 @EnableWebMvc + @Configuration + DelegatingWebMvcConfiguration 可以全面接管 SpringMVC的配置。</p>\n</li>\n</ul>\n<h2 id=\"简单功能\">简单功能<a title=\"#简单功能\" href=\"#简单功能\"></a></h2>\n<h3 id=\"静态资源访问\">静态资源访问<a title=\"#静态资源访问\" href=\"#静态资源访问\"></a></h3>\n<h4 id=\"默认目录\">默认目录<a title=\"#默认目录\" href=\"#默认目录\"></a></h4>\n<p>放在这几个目录下都可以。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210914160800954.png\" alt=\"image-20210914160800954\" style=\"zoom:80%;\" />\n<h4 id=\"修改目录\">修改目录<a title=\"#修改目录\" href=\"#修改目录\"></a></h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">   <span class=\"attr\">resources:</span></span><br><span class=\"line\">     <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/aaa/</span>,<span class=\"string\">classpath:/bbb/</span>,<span class=\"string\">...</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"映射顺序\">映射顺序<a title=\"#映射顺序\" href=\"#映射顺序\"></a></h4>\n<p>静态映射：/**</p>\n<p>请求进来，先去找 Controller 看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应 404 页面。</p>\n<h4 id=\"添加访问前缀\">添加访问前缀<a title=\"#添加访问前缀\" href=\"#添加访问前缀\"></a></h4>\n<p>默认无前缀。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"欢迎页\">欢迎页<a title=\"#欢迎页\" href=\"#欢迎页\"></a></h3>\n<p>静态资源路径下  index.html 或 Controller  <code>/index</code>。</p>\n<h3 id=\"自定义-favicon\">自定义 Favicon<a title=\"#自定义-favicon\" href=\"#自定义-favicon\"></a></h3>\n<p>favicon.ico 放在静态资源目录下即可。</p>\n<h2 id=\"模板引擎-thymeleaf\">模板引擎 Thymeleaf<a title=\"#模板引擎-thymeleaf\" href=\"#模板引擎-thymeleaf\"></a></h2>\n<p>SpringBoot 默认不支持 JSP，需要引入第三方模板引擎技术实现服务端页面渲染。</p>\n<h3 id=\"简介\">简介<a title=\"#简介\" href=\"#简介\"></a></h3>\n<p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.</p>\n<h3 id=\"文档-1\">文档<a title=\"#文档-1\" href=\"#文档-1\"></a></h3>\n<p><a href=\"https://www.thymeleaf.org/documentation.html\" target=\"_blank\">Documentation - Thymeleaf</a><br>\n<a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#introducing-thymeleaf\" target=\"_blank\">Tutorial: Using Thymeleaf</a></p>\n<h3 id=\"基本语法\">基本语法<a title=\"#基本语法\" href=\"#基本语法\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td>获取请求域、session 域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td>获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td>获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td>生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td>jsp:include 作用，引入公共页面片段</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"更多\">更多<a title=\"#更多\" href=\"#更多\"></a></h3>\n<p>暂时懒得研究这么多了，用到再查。</p>\n<p><a href=\"https://juejin.cn/post/6963550542559707143#heading-84\" target=\"_blank\">模板引擎Thymeleaf？来这一篇就够用了 - 掘金</a><br>\n<a href=\"https://juejin.cn/post/6854573205366145038#heading-18\" target=\"_blank\">Thymeleaf一篇就够了 - 掘金</a></p>\n<h2 id=\"跨域-cors\">跨域 CORS<a title=\"#跨域-cors\" href=\"#跨域-cors\"></a></h2>\n<h3 id=\"同源策略\">同源策略<a title=\"#同源策略\" href=\"#同源策略\"></a></h3>\n<p>同源指访问站点的：<code>协议</code>、<code>域名</code>、<code>端口号</code>必须一至，才叫<code>同源</code>。</p>\n<p>浏览器默认同源之间的站点是可以相互访问资源和操作 DOM 的，而不同源之间想要互相访问资源或者操作 DOM，那就需要加一些安全策略的限制，俗称同源策略。</p>\n<p>同源策略主要限制了三个方面：</p>\n<ol>\n<li><strong>DOM 层面</strong>：不同源站点之间不能相互访问和操作 DOM。</li>\n<li><strong>数据层面</strong>：不能获取不同源站点的 Cookie、LocalStorage、indexDB 等数据。</li>\n<li><strong>网络层面</strong>：阻止读取 AJAX 请求不同源站点返回的内容，实际上请求依然发送到了服务器。</li>\n</ol>\n<p>好文：</p>\n<p><a href=\"https://github.com/HXWfromDJTU/blog/issues/28\" target=\"_blank\">浏览器系列 - 只有浏览器才有 同源策略 吗？・Issue #28・HXWfromDJTU/blog</a></p>\n<p><a href=\"https://www.zhihu.com/question/68203803\" target=\"_blank\">为什么只有浏览器（或JS）是有所谓的同源策略？ - 知乎</a></p>\n<p><a href=\"https://juejin.cn/post/6991888178890145828\" target=\"_blank\">吃透浏览器安全（同源限制 / XSS/CSRF/ 中间人攻击） - 掘金</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\" target=\"_blank\">同源策略 - 维基百科，自由的百科全书</a></p>\n<p><a href=\"https://github.com/LyleMi/Learn-Web-Hacking\" target=\"_blank\">LyleMi/Learn-Web-Hacking: Study Notes For Web Hacking / Web安全学习笔记</a></p>\n<h3 id=\"spring-boot-实现-cors\">Spring Boot 实现 CORS<a title=\"#spring-boot-实现-cors\" href=\"#spring-boot-实现-cors\"></a></h3>\n<p>CORS（跨域源资源共享）（CORS，Cross-origin resource sharing）</p>\n<p>使用 CORS 可以在前端代码不做任何修改的情况下，实现跨域。</p>\n<p>生动形象：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210916160337202.png\" alt=\"image-20210916160337202\" style=\"zoom:80%;\" />\n<p>使用<code>@CrossOrigin</code>注解，可以跨域指定接受某个地址的请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(value = &quot;http://localhost:8081&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(value = &quot;http://localhost:8081&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;post hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回响应的时候会自动加上 <code>Access-Control-Allow-Origin</code> 响应头信息。告诉浏览器本服务器愿意将资源共享给此站点。这时浏览器就不会拦截XHR 获取响应数据了。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210916160826940.png\" alt=\"image-20210916160826940\" style=\"zoom:80%;\" />\n<p><code>@CrossOrigin</code> 注解的参数可以限制请求的 origin、method、header</p>\n<p>默认：</p>\n<ul>\n<li>允许所有origins</li>\n<li>允许所有headers</li>\n<li>允许所有http方法</li>\n</ul>\n<img src=\"C:\\Users\\CYX\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210916163801727.png\" alt=\"image-20210916163801727\" style=\"zoom:80%;\" />\n<p>在方法或类上使用<code>@CrossOrigin </code>注解能细粒度控制。但如果需要全局配置的话，这种方式还是比较麻烦且低效。</p>\n<p>全局配置只需要在 SpringMVC 的配置类中重写 addCorsMappings 方法即可，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)  <span class=\"comment\">// (&quot;/api/**&quot;)</span></span><br><span class=\"line\">            .allowedOrigins(<span class=\"string\">&quot;http://localhost:8081&quot;</span>,<span class=\"string\">&quot;http://localhost:8082&quot;</span>)</span><br><span class=\"line\">            .allowedMethods(<span class=\"string\">&quot;*&quot;</span>)\t<span class=\"comment\">// (&quot;PUT&quot;, &quot;DELETE&quot;)</span></span><br><span class=\"line\">            .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>);\t<span class=\"comment\">// (&quot;header1&quot;, &quot;header2&quot;, &quot;header3&quot;)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>XML 相同配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:cors</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">allowed-origins</span>=<span class=\"string\">&quot;http://localhost:8081, http://localhost:8082&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">allowed-methods</span>=<span class=\"string\">&quot;*&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">allowed-headers</span>=<span class=\"string\">&quot;*&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>/**</code> 表示本应用的所有请求<code>Mapping </code> 都会去处理跨域请求，allowedMethods 表示允许通过的请求方法，allowedHeaders 则表示允许的请求头。经过这样的配置之后，就不必在每个方法上单独配置跨域了。</p>\n<h3 id=\"csrf\">CSRF<a title=\"#csrf\" href=\"#csrf\"></a></h3>\n<p><strong>利用用户的登录状态发起跨站请求</strong>，比如邮箱里的乱七八糟的链接，打开链接的时候邮箱肯定是处于登录状态，然后就可以用这个登录状态，伪造带有正确 Cookie 的 http 请求，直接绕过后台的登录验证，然后冒充用户执行一些操作。</p>\n<p>发起 CSRF 攻击有三个必要条件：</p>\n<ol>\n<li>目标网站一定要有 CSRF 漏洞</li>\n<li>用户登录过目标网站，并且浏览器保存了登录状态</li>\n<li>需要用户主动打开第三方站点</li>\n</ol>\n<p><strong>本质是利用 cookie 在同源请求中携带发送给服务器的特点，来实现冒充用户</strong></p>\n<p>CSRF 攻击也有三种类型：<strong>GET 类型</strong>、 <strong>POST 类型</strong>、<strong>链接型</strong></p>\n<ul>\n<li><code>自动发GET类型</code>：比如 <code>img</code> 或 <code>iframe</code> 标签等，当用户打开这个网站时会自动发起带 Cookie 的资源请求</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://恶意网址&quot;</span> &gt;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>自动发POST类型</code>：比如整一个隐藏的<code>表单</code>，在用户进入页面的时候自动提交表单</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hack&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;https://恶意网址&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;hack&#x27;</span>).submit()</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>诱导链接型</code>：就是诱导用户主动点击链接，比如 <code>a标签</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://恶意网址&quot;</span>&gt;</span>点击领取大礼包<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://恶意网址&quot;</span>&gt;</span>点击下载美女视频<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更多参考：</p>\n<ul>\n<li><a href=\"https://tech.meituan.com/2018/10/11/fe-security-csrf.html\" target=\"_blank\">前端安全系列（二）：如何防止 CSRF 攻击？ - 美团技术团队</a></li>\n<li><a href=\"https://juejin.cn/post/6991888178890145828\" target=\"_blank\">吃透浏览器安全（同源限制 / XSS/CSRF/ 中间人攻击） - 掘金</a></li>\n</ul>\n<h1 id=\"数据访问\">数据访问<a title=\"#数据访问\" href=\"#数据访问\"></a></h1>\n<h2 id=\"默认数据源\">默认数据源<a title=\"#默认数据源\" href=\"#默认数据源\"></a></h2>\n<p>Spring Boot 官方使用的数据源是：<code>HikariCP</code>。</p>\n<ul>\n<li>\n<p>流行的数据源里<code>HikariCP</code>应该是速度最快，性能最高的。</p>\n</li>\n<li>\n<p>而<code>Druid</code> 功能全面、扩展性强、国内生态好，性能也还不错。</p>\n</li>\n<li>\n<p>还有个小众的数据源，BeeCP，光论速度的话好像比<code>HikariCP</code>还要快：<a href=\"https://github.com/Chris2018998/BeeCP\" target=\"_blank\">Chris2018998/BeeCP: A High Performance JDBC Connection Pool(faster than HikariCP)</a></p>\n</li>\n</ul>\n<p>各种数据源对比评测：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/superdangbo/article/details/78734181\" target=\"_blank\">HikariCP VS druid VS c3p0 VS dbcp VS jdbc 数据库连接池性能比对_Java &amp; Basketball-CSDN 博客</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1446874\" target=\"_blank\">对比各大数据库连接池技术 - Jdbc-Dbcp-C3p0-Druid-Hikaricp - 云 + 社区 - 腾讯云</a></li>\n</ul>\n<p><code>druid</code> 数据源<code>starter</code> 及文档：<a href=\"https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter\" target=\"_blank\">druid/druid-spring-boot-starter at master · alibaba/druid</a></p>\n<h2 id=\"整合-redis\">整合 Redis<a title=\"#整合-redis\" href=\"#整合-redis\"></a></h2>\n<p>SpringBoot 1.5.x版本Redis客户端默认是Jedis实现的，SpringBoot 2.x版本中默认客户端是用Lettuce实现的。</p>\n<p>可参考：</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844904094545477640\" target=\"_blank\">Spring Data Redis 最佳实践！ - 掘金</a></li>\n<li><a href=\"https://www.cnblogs.com/throwable/p/11601538.html#%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F\" target=\"_blank\">Redis高级客户端Lettuce详解 - throwable - 博客园</a></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.40</span><span class=\"number\">.138</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootApplicationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stringRedisTemplate.boundValueOps(<span class=\"string\">&quot;name&quot;</span>).set(<span class=\"string\">&quot;chenyuxi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(stringRedisTemplate.boundValueOps(<span class=\"string\">&quot;name&quot;</span>).get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整合-mybatis\">整合 Mybatis<a title=\"#整合-mybatis\" href=\"#整合-mybatis\"></a></h2>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mysql地址连接属性等</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql:///exam?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Mybatis的模型地址和Mapper.xml文件地址</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.example.springboot.entity</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath*:mapper/*Mapper.xml</span></span><br><span class=\"line\"><span class=\"comment\">#  指定mybatis 核心配置文件</span></span><br><span class=\"line\"><span class=\"comment\">#  config-location:</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"整合-mybatis-plus\">整合 Mybatis-Plus<a title=\"#整合-mybatis-plus\" href=\"#整合-mybatis-plus\"></a></h2>\n<p>项目地址：<a href=\"https://github.com/baomidou/mybatis-plus\" target=\"_blank\">baomidou/mybatis-plus: An powerful enhanced toolkit of MyBatis for simplify development</a></p>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后继承 <a href=\"https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java\" target=\"_blank\">BaseMapper</a>接口，即可拥有CRUD 能力。</p>\n<p>Service 层也封装好了，继承<a href=\"https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java\" target=\"_blank\">IService</a>接口即可。如果要自定义通用 Service 方法，就创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类。</p>\n<p>learn more：<a href=\"https://baomidou.com/guide/\" target=\"_blank\">简介 | MyBatis-Plus</a></p>\n<h2 id=\"整合-spring-data-jpa\">整合 Spring Data JPA<a title=\"#整合-spring-data-jpa\" href=\"#整合-spring-data-jpa\"></a></h2>\n<h3 id=\"jpa-是啥\">JPA 是啥<a title=\"#jpa-是啥\" href=\"#jpa-是啥\"></a></h3>\n<p>Java Persistence API：用于对象持久化的 API</p>\n<p>Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/b64e266a41c25a66a57167fa32c1639b1603775386347.jpg\" alt=\"b64e266a41c25a66a57167fa32c1639b1603775386347\" style=\"zoom:80%;\" />\n<h3 id=\"jpa-和-hibernate-的关系\">JPA 和 Hibernate 的关系<a title=\"#jpa-和-hibernate-的关系\" href=\"#jpa-和-hibernate-的关系\"></a></h3>\n<p>Hibernate是 JPA的一种实现。</p>\n<h3 id=\"jpa-包含的技术\">JPA 包含的技术<a title=\"#jpa-包含的技术\" href=\"#jpa-包含的技术\"></a></h3>\n<ol>\n<li>\n<p>ORM 映射元数据：JPA 支持 XML 和 JDK 5.0 注解两种元数据的形式，元数据描述对象和表之间的<br>\n映射关系，框架据此将实体对象持久化到数据库表中。</p>\n</li>\n<li>\n<p>JPA 的 API：用来操作实体对象，执行CRUD操作，框架在后台完成所有的事情，开发者从繁琐的<br>\nJDBC 和 SQL 代码中解脱出来。</p>\n</li>\n<li>\n<p>查询语言（JPQL）：这是持久化操作中很重要的一个方面，通过面向对象而非面向数据库的查询<br>\n语言查询数据，避免程序和具体的 SQL 紧密耦合。</p>\n</li>\n</ol>\n<h3 id=\"jpql\">JPQL<a title=\"#jpql\" href=\"#jpql\"></a></h3>\n<p>SQL = <strong>Structur</strong> Query Language （结构化 查询语言）</p>\n<p>JPQL = Java <strong>Persistence</strong> Query Language （Java持久化 查询语言）</p>\n<h3 id=\"spring-data\">Spring Data<a title=\"#spring-data\" href=\"#spring-data\"></a></h3>\n<p>Spring Data 是 Spring 的一个子项目。用于简化数据库访问，支持NoSQL 和 关系数据存储。其主要目标是使数据库的访问变得方便快捷。</p>\n<p><strong>Main modules</strong></p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-data-commons\" target=\"_blank\">Spring Data Commons</a> - Core Spring concepts underpinning every Spring Data module.</li>\n<li><a href=\"https://spring.io/projects/spring-data-jdbc\" target=\"_blank\">Spring Data JDBC</a> - Spring Data repository support for JDBC.</li>\n<li><a href=\"https://spring.io/projects/spring-data-jdbc-ext\" target=\"_blank\">Spring Data JDBC Ext</a> - Support for database specific extensions to standard JDBC including support for Oracle RAC fast connection failover, AQ JMS support and support for using advanced data types.</li>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\" target=\"_blank\">Spring Data JPA</a> - Spring Data repository support for JPA.</li>\n<li><a href=\"https://github.com/spring-projects/spring-data-keyvalue\" target=\"_blank\">Spring Data KeyValue</a> - <code>Map</code> based repositories and SPIs to easily build a Spring Data module for key-value stores.</li>\n<li><a href=\"https://spring.io/projects/spring-data-ldap\" target=\"_blank\">Spring Data LDAP</a> - Spring Data repository support for <a href=\"https://github.com/spring-projects/spring-ldap\" target=\"_blank\">Spring LDAP</a>.</li>\n<li><a href=\"https://spring.io/projects/spring-data-mongodb\" target=\"_blank\">Spring Data MongoDB</a> - Spring based, object-document support and repositories for MongoDB.</li>\n<li><a href=\"https://spring.io/projects/spring-data-redis\" target=\"_blank\">Spring Data Redis</a> - Easy configuration and access to Redis from Spring applications.</li>\n<li><a href=\"https://spring.io/projects/spring-data-rest\" target=\"_blank\">Spring Data REST</a> - Exports Spring Data repositories as hypermedia-driven RESTful resources.</li>\n<li><a href=\"https://spring.io/projects/spring-data-cassandra\" target=\"_blank\">Spring Data for Apache Cassandra</a> - Easy configuration and access to Apache Cassandra or large scale, highly available, data oriented Spring applications.</li>\n<li><a href=\"https://spring.io/projects/spring-data-geode\" target=\"_blank\">Spring Data for Apache Geode</a> - Easy configuration and access to Apache Geode for highly consistent, low latency, data oriented Spring applications.</li>\n<li><a href=\"https://spring.io/projects/spring-data-gemfire\" target=\"_blank\">Spring Data for Pivotal GemFire</a> - Easy configuration and access to Pivotal GemFire for your highly consistent, low latency/high through-put, data-oriented Spring applications.</li>\n</ul>\n<p><strong>Community modules</strong></p>\n<ul>\n<li><a href=\"https://github.com/aerospike-community/spring-data-aerospike\" target=\"_blank\">Spring Data Aerospike</a> - Spring Data module for Aerospike.</li>\n<li><a href=\"https://github.com/arangodb/spring-data\" target=\"_blank\">Spring Data ArangoDB</a> - Spring Data module for ArangoDB.</li>\n<li><a href=\"https://spring.io/projects/spring-data-couchbase\" target=\"_blank\">Spring Data Couchbase</a> - Spring Data module for Couchbase.</li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos\" target=\"_blank\">Spring Data Azure Cosmos DB</a> - Spring Data module for Microsoft Azure Cosmos DB.</li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-gcp\" target=\"_blank\">Spring Data Cloud Datastore</a> - Spring Data module for Google Datastore.</li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-gcp\" target=\"_blank\">Spring Data Cloud Spanner</a> - Spring Data module for Google Spanner.</li>\n<li><a href=\"https://github.com/boostchicken/spring-data-dynamodb\" target=\"_blank\">Spring Data DynamoDB</a> - Spring Data module for DynamoDB.</li>\n<li><a href=\"https://spring.io/projects/spring-data-elasticsearch\" target=\"_blank\">Spring Data Elasticsearch</a> - Spring Data module for Elasticsearch.</li>\n<li><a href=\"https://github.com/hazelcast/spring-data-hazelcast\" target=\"_blank\">Spring Data Hazelcast</a> - Provides Spring Data repository support for Hazelcast.</li>\n<li><a href=\"https://github.com/VanRoy/spring-data-jest\" target=\"_blank\">Spring Data Jest</a> - Spring Data module for Elasticsearch based on the Jest REST client.</li>\n<li><a href=\"https://spring.io/projects/spring-data-neo4j\" target=\"_blank\">Spring Data Neo4j</a> - Spring-based, object-graph support and repositories for Neo4j.</li>\n<li><a href=\"https://github.com/oracle/nosql-spring-sdk\" target=\"_blank\">Oracle NoSQL Database SDK for Spring Data</a> - Spring Data module for Oracle NoSQL Database and Oracle NoSQL Cloud Service.</li>\n<li><a href=\"https://spring.io/projects/spring-data-solr\" target=\"_blank\">Spring Data for Apache Solr</a> - Easy configuration and access to Apache Solr for your search-oriented Spring applications.</li>\n<li><a href=\"https://spring.io/projects/spring-vault/\" target=\"_blank\">Spring Data Vault</a> - Vault repositories built on top of <a href=\"https://github.com/spring-projects/spring-data-keyvalue\" target=\"_blank\">Spring Data KeyValue</a>.</li>\n<li><a href=\"https://github.com/yugabyte/spring-data-yugabytedb\" target=\"_blank\">Spring Data YugabyteDB</a> - Spring Data module for <a href=\"https://www.yugabyte.com/\" target=\"_blank\">YugabyteDB</a> distributed SQL database.</li>\n</ul>\n<h3 id=\"spring-data-jpa\">Spring Data JPA<a title=\"#spring-data-jpa\" href=\"#spring-data-jpa\"></a></h3>\n<p>Spring Data JPA 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就是声明持久层的接口，其他都交给 Spring Data JPA 来完成。</p>\n<p>Spring Data JPA 可以理解为 JPA 规范的再次封装抽象，底层还是使用了 Hibernate 的 JPA 技术实现。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/2586a2e050f4a494406dae71594381041603775386347.jpg\" alt=\"2586a2e050f4a494406dae71594381041603775386347\" style=\"zoom:80%;\" />\n<h3 id=\"基本使用\">基本使用<a title=\"#基本使用\" href=\"#基本使用\"></a></h3>\n<p>添加模块：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>数据源是肯定要配置的：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql:///exam?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimeZone=Asia/ShangHai</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在控制台打印sql</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 每次启动项目时，数据库初始化策略</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br></pre></td></tr></table></figure>\n<p>实体类，Spring Data JPA 会根据实体类自动生成Schema ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(name = &quot;t_user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dao 层，继承<code>JpaRepository</code>，两个参数，指定实体类和主键类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承此类后接口就能获得一大把CRUD 方法。例如保存，更新，删除，分页查询等。</p>\n<p>也可以根据<a href=\"https://docs.spring.io/spring-data/jpa/docs/2.5.4/reference/html/#jpa.query-methods.query-creation\" target=\"_blank\">命名规范</a>自定义方法，Spring Data JPA 将根据方法名称实现功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findByAddressEqualsAndIdLessThanEqual</span><span class=\"params\">(String address, Integer id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>命名实现不了的复杂sql，可以使用注解自定义 （<a href=\"https://docs.spring.io/spring-data/jpa/docs/2.5.4/reference/html/#jpa.query-methods.at-query\" target=\"_blank\">Using @Query</a>）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query(value = &quot;select * from t_user where id=(select max(id) from t_user)&quot;, nativeQuery = true)</span></span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">maxIdUser</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"单元测试\">单元测试<a title=\"#单元测试\" href=\"#单元测试\"></a></h1>\n<p>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库。</p>\n<h2 id=\"junit-5-常用注解\">Junit 5 常用注解<a title=\"#junit-5-常用注解\" href=\"#junit-5-常用注解\"></a></h2>\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\" target=\"_blank\">2.1. Annotations - JUnit 5 User Guide</a></p>\n<ul>\n<li>@Test : 表示方法是测试方法。但是与 JUnit4 的 @Test 不同，他的职责非常单一不能声明任何属性，拓展的测试将会由 Jupiter 提供额外测试。</li>\n<li>@ParameterizedTest : 表示方法是参数化测试</li>\n<li>@RepeatedTest : 表示方法可重复执行</li>\n<li>@DisplayName : 为测试类或者测试方法设置展示名称</li>\n<li>@BeforeEach : 表示在每个单元测试之前执行</li>\n<li>@AfterEach : 表示在每个单元测试之后执行</li>\n<li>@BeforeAll : 表示在所有单元测试之前执行</li>\n<li>@AfterAll : 表示在所有单元测试之后执行</li>\n<li>@Tag : 表示单元测试类别，类似于 JUnit4 中的 @Categories</li>\n<li>@Disabled : 表示测试类或测试方法不执行，类似于 JUnit4 中的 @Ignore</li>\n<li>@Timeout : 表示测试方法运行如果超过了指定时间将会返回错误</li>\n<li>@ExtendWith : 为测试类或测试方法提供扩展类引用</li>\n</ul>\n<h2 id=\"断言\">断言<a title=\"#断言\" href=\"#断言\"></a></h2>\n<p>用来对单个值进行简单的验证。如：</p>\n<p>简单断言：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assertEquals</td>\n<td>判断两个对象或两个原始类型是否相等</td>\n</tr>\n<tr>\n<td>assertNotEquals</td>\n<td>判断两个对象或两个原始类型是否不相等</td>\n</tr>\n<tr>\n<td>assertSame</td>\n<td>判断两个对象引用是否指向同一个对象</td>\n</tr>\n<tr>\n<td>assertNotSame</td>\n<td>判断两个对象引用是否指向不同的对象</td>\n</tr>\n<tr>\n<td>assertTrue</td>\n<td>判断给定的布尔值是否为 true</td>\n</tr>\n<tr>\n<td>assertFalse</td>\n<td>判断给定的布尔值是否为 false</td>\n</tr>\n<tr>\n<td>assertNull</td>\n<td>判断给定的对象引用是否为 null</td>\n</tr>\n<tr>\n<td>assertNotNull</td>\n<td>判断给定的对象引用是否不为 null</td>\n</tr>\n</tbody>\n</table></div></div><p>超时断言：Assertions.assertTimeout() 为测试方法设置了超时时间</p>\n<p>异常断言：Assertions.assertThrows() 配合函数式编程使用</p>\n<p>快速失败：通过 fail() 方法直接使得测试失败</p>\n<h1 id=\"监控\">监控<a title=\"#监控\" href=\"#监控\"></a></h1>\n<h2 id=\"简介-1\">简介<a title=\"#简介-1\" href=\"#简介-1\"></a></h2>\n<p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot 就抽取了 <strong>Spring Boot Actuator</strong> 场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>\n<p>1.x 与 2.x 的不同：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/1606884394162-ac7f2d8e-7abb-44df-9998-fb0f2705f238.png\" alt=\"image.png\" style=\"zoom: 67%;\" />\n<h2 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>访问<code>http://localhost:8080/actuator</code></p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/image-20210916134733282.png\" alt=\"image-20210916134733282\" style=\"zoom:80%;\" />\n<h2 id=\"spring-boot-admin\">Spring Boot Admin<a title=\"#spring-boot-admin\" href=\"#spring-boot-admin\"></a></h2>\n<p><a href=\"https://github.com/codecentric/spring-boot-admin\" target=\"_blank\">codecentric/spring-boot-admin: Admin UI for administration of spring boot applications</a></p>\n<p>admin-server:</p>\n<ol>\n<li>创建admin-server模块</li>\n<li>导入依赖坐标admin-starter-server</li>\n<li>在引导类上启用监控功能@EnableAdminServer</li>\n</ol>\n<p>admin-client:</p>\n<ol>\n<li>\n<p>创建admin-client模块</p>\n</li>\n<li>\n<p>导入依赖坐标admin-starter-client</p>\n</li>\n<li>\n<p>配置相关信息：server地址等</p>\n</li>\n<li>\n<p>启动server和client服务，访问server</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/codecentric/spring-boot-admin/blob/master/images/screenshot.png?raw=true\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"事件与监听\">事件与监听<a title=\"#事件与监听\" href=\"#事件与监听\"></a></h1>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6960672715111940126#heading-2\" target=\"_blank\">强大的Spring Boot启动监听器事件-初始化系统账号密码 - 掘金</a></li>\n<li><a href=\"https://juejin.cn/post/6989816932765532174#heading-8\" target=\"_blank\">SpringBoot监听器 - 掘金</a></li>\n</ul>\n<h2 id=\"springapplicationevents-事件类型\">SpringApplicationEvents 事件类型<a title=\"#springapplicationevents-事件类型\" href=\"#springapplicationevents-事件类型\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/c723c43832714b1facacd8c5bc8b7842~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<img src=\"https://cdn.jsdelivr.net/gh/chenyuxi2002/pic/img/9a51429684d24f5abb1c2ba34715e917~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" style=\"zoom:80%;\" />\n<h2 id=\"自定义事件\">自定义事件<a title=\"#自定义事件\" href=\"#自定义事件\"></a></h2>\n<p><a href=\"https://juejin.cn/post/6982489807889006605\" target=\"_blank\">Spring 的事件监听最简单使用例子 - 掘金</a></p>\n","next":{"title":"ioasnfoniofnais","link":"3fa6e885"},"plink":"http://www.chenyuxi.top/spring-boot/","toc":[{"id":"资料","title":"资料","index":"1","children":[{"id":"文档","title":"文档","index":"1.1"},{"id":"源码","title":"源码","index":"1.2"},{"id":"spring-boot-plus","title":"Spring Boot Plus","index":"1.3"},{"id":"启动流程","title":"启动流程","index":"1.4"}]},{"id":"概述","title":"概述","index":"2","children":[{"id":"什么是-spring-boot？","title":"什么是 Spring Boot？","index":"2.1"},{"id":"spring-boot-有哪些优点？","title":"Spring Boot 有哪些优点？","index":"2.2"},{"id":"时代背景","title":"时代背景","index":"2.3","children":[{"id":"微服务","title":"微服务","index":"2.3.1"},{"id":"分布式","title":"分布式","index":"2.3.2"},{"id":"云原生","title":"云原生","index":"2.3.3"}]}]},{"id":"入门","title":"入门","index":"3","children":[{"id":"hello-world","title":"Hello World","index":"3.1"},{"id":"起步依赖","title":"起步依赖","index":"3.2"}]},{"id":"配置","title":"配置","index":"4","children":[{"id":"配置文件分类","title":"配置文件分类","index":"4.1"},{"id":"yaml-基本语法","title":"yaml 基本语法","index":"4.2"},{"id":"读取配置文件","title":"读取配置文件","index":"4.3"},{"id":"profile-（动态切换配置）","title":"profile （动态切换配置）","index":"4.4","children":[{"id":"profile-配置方式","title":"profile 配置方式","index":"4.4.1","children":[{"id":"多profile文件方式","title":"多profile文件方式","index":"4.4.1.1"},{"id":"yml-多文档方式","title":"yml 多文档方式","index":"4.4.1.2"}]},{"id":"profile-激活方式","title":"profile 激活方式","index":"4.4.2","children":[{"id":"配置文件","title":"配置文件","index":"4.4.2.1"},{"id":"虚拟机参数","title":"虚拟机参数","index":"4.4.2.2"},{"id":"命令行参数","title":"命令行参数","index":"4.4.2.3"}]}]},{"id":"内部配置加载顺序","title":"内部配置加载顺序","index":"4.5"},{"id":"外部配置加载顺序","title":"外部配置加载顺序","index":"4.6"}]},{"id":"容器功能注解","title":"容器功能注解","index":"5","children":[{"id":"组件添加","title":"组件添加","index":"5.1","children":[{"id":"@configuration、@bean、@componentscan","title":"@Configuration、@Bean、@ComponentScan","index":"5.1.1"},{"id":"@component、@controller、@service、@repository","title":"@Component、@Controller、@Service、@Repository","index":"5.1.2"},{"id":"@import","title":"@Import","index":"5.1.3"},{"id":"@condition","title":"@Condition","index":"5.1.4"}]},{"id":"原生配置文件引入","title":"原生配置文件引入","index":"5.2","children":[{"id":"@importresource","title":"@ImportResource","index":"5.2.1"}]}]},{"id":"自动装配","title":"自动装配","index":"6","children":[{"id":"什么是springboot-自动装配？","title":"什么是SpringBoot 自动装配？","index":"6.1"},{"id":"原理分析","title":"原理分析","index":"6.2","children":[{"id":"@springbootconfiguration","title":"@SpringBootConfiguration","index":"6.2.1"},{"id":"@componentscan","title":"@ComponentScan","index":"6.2.2"},{"id":"@enableautoconfiguration","title":"@EnableAutoConfiguration","index":"6.2.3"},{"id":"autoconfigurationimportselector.class","title":"AutoConfigurationImportSelector.class","index":"6.2.4"},{"id":"importselector","title":"ImportSelector","index":"6.2.5"},{"id":"getautoconfigurationentry","title":"getAutoConfigurationEntry","index":"6.2.6"},{"id":"getcandidateconfigurations","title":"getCandidateConfigurations","index":"6.2.7"},{"id":"loadspringfactories","title":"loadSpringFactories","index":"6.2.8"},{"id":"meta-inf/spring.factories","title":"META-INF&#x2F;spring.factories","index":"6.2.9"},{"id":"按需加载-@condition","title":"按需加载 @Condition","index":"6.2.10"},{"id":"总结","title":"总结","index":"6.2.11"}]},{"id":"查看自动装配的所有bean","title":"查看自动装配的所有bean","index":"6.3","children":[{"id":"方法1","title":"方法1","index":"6.3.1"},{"id":"方法2","title":"方法2","index":"6.3.2"},{"id":"方法3","title":"方法3","index":"6.3.3"}]},{"id":"自定义starter","title":"自定义Starter","index":"6.4"}]},{"id":"web开发","title":"Web开发","index":"7","children":[{"id":"内置web-服务器","title":"内置Web 服务器","index":"7.1"},{"id":"springmvc-自动配置","title":"SpringMVC 自动配置","index":"7.2"},{"id":"简单功能","title":"简单功能","index":"7.3","children":[{"id":"静态资源访问","title":"静态资源访问","index":"7.3.1","children":[{"id":"默认目录","title":"默认目录","index":"7.3.1.1"},{"id":"修改目录","title":"修改目录","index":"7.3.1.2"},{"id":"映射顺序","title":"映射顺序","index":"7.3.1.3"},{"id":"添加访问前缀","title":"添加访问前缀","index":"7.3.1.4"}]},{"id":"欢迎页","title":"欢迎页","index":"7.3.2"},{"id":"自定义-favicon","title":"自定义 Favicon","index":"7.3.3"}]},{"id":"模板引擎-thymeleaf","title":"模板引擎 Thymeleaf","index":"7.4","children":[{"id":"简介","title":"简介","index":"7.4.1"},{"id":"文档-1","title":"文档","index":"7.4.2"},{"id":"基本语法","title":"基本语法","index":"7.4.3"},{"id":"更多","title":"更多","index":"7.4.4"}]},{"id":"跨域-cors","title":"跨域 CORS","index":"7.5","children":[{"id":"同源策略","title":"同源策略","index":"7.5.1"},{"id":"spring-boot-实现-cors","title":"Spring Boot 实现 CORS","index":"7.5.2"},{"id":"csrf","title":"CSRF","index":"7.5.3"}]}]},{"id":"数据访问","title":"数据访问","index":"8","children":[{"id":"默认数据源","title":"默认数据源","index":"8.1"},{"id":"整合-redis","title":"整合 Redis","index":"8.2"},{"id":"整合-mybatis","title":"整合 Mybatis","index":"8.3"},{"id":"整合-mybatis-plus","title":"整合 Mybatis-Plus","index":"8.4"},{"id":"整合-spring-data-jpa","title":"整合 Spring Data JPA","index":"8.5","children":[{"id":"jpa-是啥","title":"JPA 是啥","index":"8.5.1"},{"id":"jpa-和-hibernate-的关系","title":"JPA 和 Hibernate 的关系","index":"8.5.2"},{"id":"jpa-包含的技术","title":"JPA 包含的技术","index":"8.5.3"},{"id":"jpql","title":"JPQL","index":"8.5.4"},{"id":"spring-data","title":"Spring Data","index":"8.5.5"},{"id":"spring-data-jpa","title":"Spring Data JPA","index":"8.5.6"},{"id":"基本使用","title":"基本使用","index":"8.5.7"}]}]},{"id":"单元测试","title":"单元测试","index":"9","children":[{"id":"junit-5-常用注解","title":"Junit 5 常用注解","index":"9.1"},{"id":"断言","title":"断言","index":"9.2"}]},{"id":"监控","title":"监控","index":"10","children":[{"id":"简介-1","title":"简介","index":"10.1"},{"id":"使用","title":"使用","index":"10.2"},{"id":"spring-boot-admin","title":"Spring Boot Admin","index":"10.3"}]},{"id":"事件与监听","title":"事件与监听","index":"11","children":[{"id":"springapplicationevents-事件类型","title":"SpringApplicationEvents 事件类型","index":"11.1"},{"id":"自定义事件","title":"自定义事件","index":"11.2"}]}],"copyright":{"author":"陈予希","link":"<a href=\"http://www.chenyuxi.top/spring-boot/\" title=\"Spring Boot\">http://www.chenyuxi.top/spring-boot/</a>","license":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a> 许可协议。欢迎转载，但请注明出处！🤗"}}